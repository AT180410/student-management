name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Trivy for Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Build with Maven to generate dependencies
        run: ./mvnw -B compile dependency:tree
      - name: Run Trivy vulnerability scanner for dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-deps-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-container-report.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: trivy-container-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IoC scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  # 🔒 SECURITY GATE CHÍNH - CHECK tất cả report trừ DAST
  security-gate:
    name: 🔒 Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - name: Analyze Security Reports
        id: check-gate
        run: |
          set -e
          echo "🔒 Analyzing Security Reports..."
          FAIL=0
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          
          # 📦 SCA
          if [ -f "reports/trivy-deps-report.sarif" ]; then
            CRIT=$(jq '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' reports/trivy-deps-report.sarif)
            HIGH=$(jq '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' reports/trivy-deps-report.sarif)
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + CRIT))
            TOTAL_HIGH=$((TOTAL_HIGH + HIGH))
            if [ "$CRIT" -gt 0 ]; then FAIL=1; fi
          fi
          
          # 🐳 Container
          if [ -f "reports/trivy-container-report.sarif" ]; then
            CRIT=$(jq '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' reports/trivy-container-report.sarif)
            HIGH=$(jq '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' reports/trivy-container-report.sarif)
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + CRIT))
            TOTAL_HIGH=$((TOTAL_HIGH + HIGH))
            if [ "$CRIT" -gt 0 ]; then FAIL=1; fi
          fi
          
          # 🔧 IaC
          if [ -f "reports/iac/checkov-results.sarif" ]; then
            CRIT=$(jq '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' reports/iac/checkov-results.sarif)
            HIGH=$(jq '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' reports/iac/checkov-results.sarif)
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + CRIT))
            TOTAL_HIGH=$((TOTAL_HIGH + HIGH))
            if [ "$CRIT" -gt 0 ]; then FAIL=1; fi
          fi
          
          echo "📊 CRITICAL: $TOTAL_CRITICAL | HIGH: $TOTAL_HIGH"
          if [ "$FAIL" -eq 1 ]; then
            echo "❌ Security Gate failed"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Security Gate passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi
  deploy-staging:
    name: 🚀 Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/test' && needs.security-gate.outputs.passed == 'true'
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          curl --silent --show-error --fail -X POST \
            "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
      - name: Wait for deployment to be ready
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          for i in {1..20}; do
            if curl --silent --fail "$TARGET/actuator/health" > /dev/null; then
              exit 0
            fi
            sleep 10
          done
          exit 1
  dast:
    name: 🛡️ DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Wait for application to be ready
        run: |
          for i in {1..30}; do
            if curl -s -f ${{ needs.deploy-staging.outputs.url }}/actuator/health > /dev/null; then
              exit 0
            fi
            sleep 10
          done
          exit 1
      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" \
            -a -m 10 -T 180 | tee zap-console.log
          grep -E "ALERT|FAIL" zap-console.log || true
  dynamic-security-gate:
    name: 🔒 Dynamic Security Gate (DAST)
    runs-on: ubuntu-latest
    needs: dast
    if: github.ref == 'refs/heads/test' && always()
    outputs:
      passed: ${{ steps.dast-check.outputs.passed }}
    steps:
      - name: Check DAST Results
        id: dast-check
        run: |
          echo "✅ DAST completed (always pass for now)"
          echo "passed=true" >> $GITHUB_OUTPUT
  deploy-production:
    name: 🚀 Deploy to Production (Heroku Docker)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main' && needs.security-gate.outputs.passed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Login to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo "${HEROKU_API_KEY}" | docker login --username=_ --password-stdin registry.heroku.com
      - name: Build Docker image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .
      - name: Push Docker image to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
      - name: Release Docker image
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          curl --silent --show-error --fail -X POST \
            "https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/releases" \
            -d '{"slug":null,"description":"Deploy via GitHub Actions"}' \
            -H "Content-Type:application/json" \
            -H "Accept: application/vnd.heroku+json; version=3" \
            -H "Authorization: Bearer ${HEROKU_API_KEY}"
  # 📊 SECURITY REPORT
  report:
    name: 📊 Unified Security Report
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, dast]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y jq
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - name: Generate Security Report
        run: |
          mkdir -p reports/final
          echo "<html><body><h1>Security Report</h1>" > reports/final/security-report.html
          echo "<p>Generated on $(date)</p>" >> reports/final/security-report.html
          echo "</body></html>" >> reports/final/security-report.html
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html

  notify:
    name: 📢 Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, report, dynamic-security-gate]
    if: always()
    steps:
      - name: ✅ Notify Success
        if: ${{ success() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ✅ **Pipeline SUCCESS** cho `${{ github.repository }}`
            🔀 Branch: `${{ github.ref_name }}`
            📌 Status: **SUCCESS**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result || 'N/A' }}
      - name: ❌ Notify Failure
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ❌ **Pipeline FAILED** cho `${{ github.repository }}`
            🔀 Branch: `${{ github.ref_name }}`
            📌 Status: **FAILED**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result || 'N/A' }}
