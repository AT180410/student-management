name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  # 🔄 SỬA LẠI PHẦN NÀY - SỬ DỤNG TRIVY CHO SCA
  sca:
    name: SCA (Trivy for Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java for Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Build with Maven to generate dependencies
        run: |
          chmod +x ./mvnw
          ./mvnw -B compile dependency:tree
          
      - name: Run Trivy vulnerability scanner for dependencies
        uses: aquasecurity/trivy-action@master
        id: trivy-deps
        with:
          scan-type: 'fs'
          scan-ref: '.'  # Quét toàn bộ project, Trivy tự detect Maven
          format: 'sarif'
          output: 'trivy-deps-report.sarif'
          severity: 'CRITICAL,HIGH'  # Chỉ tập trung vào lỗi nghiêm trọng
          ignore-unfixed: true       # Bỏ qua lỗi chưa có bản fix
          exit-code: 0               # Không fail pipeline ngay lập tức

      - name: Upload Trivy SCA report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-container-report.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: trivy-container-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IoC scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  # 🔄 SECURITY GATE
  security-gate:
    name: 🔒 Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: trivy-deps-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-container-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac

      - name: Analyze Security Reports
        id: check-gate
        run: |
          set -e
          echo "🔒 Analyzing Security Reports..."
          FAIL=0
          
          # 🔄 SCA  TRIVY
           if [ -f reports/sca/trivy-deps-report.sarif ]; then
              echo "📦 Analyzing SCA results (Trivy)..."
              CRITICAL_COUNT=$(jq '[.runs[].results[]? | select(.properties.severity == "CRITICAL")] | length' reports/sca/trivy-deps-report.sarif || echo "0")
              HIGH_COUNT=$(jq '[.runs[].results[]? | select(.properties.severity == "HIGH")] | length' reports/sca/trivy-deps-report.sarif || echo "0")
              
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ SCA found $CRITICAL_COUNT CRITICAL vulnerabilities"
              FAIL=1
            fi
            echo "ℹ️ SCA HIGH vulnerabilities: ${HIGH_COUNT}"
          else
            echo "⚠️ No SCA SARIF report found at reports/sca/trivy-deps-report.sarif"
          fi

          # 🔄 PHẦN CONTAINER SCAN
          if [ -f reports/container/trivy-container-report.sarif ]; then
            echo "🐳 Analyzing Container Scan results..."
            CRITICAL_COUNT=$(jq '[.runs[].results[]? | select(.severity == "critical")] | length' reports/container/trivy-container-report.sarif || echo "0")
            HIGH_COUNT=$(jq '[.runs[].results[]? | select(.severity == "high")] | length' reports/container/trivy-container-report.sarif || echo "0")
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Container scan found $CRITICAL_COUNT CRITICAL vulnerabilities"
              FAIL=1
            fi
            echo "ℹ️ Container scan HIGH vulnerabilities: ${HIGH_COUNT}"
          fi

          # 🔄 PHẦN IAC SCAN 
          if [ -f reports/iac/checkov-results.sarif ]; then
            echo "🔧 Analyzing IaC results..."
            CRIT_COUNT=$(jq '[.runs[0].results[]? | select((.properties.severity? // "") == "CRITICAL" or (.level=="error"))] | length' reports/iac/checkov-results.sarif || echo "0")
            HIGH_COUNT=$(jq '[.runs[0].results[]? | select((.properties.severity? // "") == "HIGH" or (.level=="warning"))] | length' reports/iac/checkov-results.sarif || echo "0")
            
            if [ "$CRIT_COUNT" -gt 0 ]; then
              echo "❌ IaC scan found $CRIT_COUNT CRITICAL vulnerabilities"
              FAIL=1
            fi
            echo "ℹ️ IaC HIGH vulnerabilities: $HIGH_COUNT"
          fi

          if [ "$FAIL" -eq 1 ]; then
            echo "❌ Security Gate failed - Found CRITICAL vulnerabilities"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Security Gate passed - No CRITICAL vulnerabilities found"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: 🚀 Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/test' && needs.security-gate.outputs.passed == 'true'
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: |
          echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
  
      - name: Trigger Render Deploy (use Authorization header)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          echo "🚀 Triggering Render deploy for service: $SERVICE_ID"
          curl --silent --show-error --fail -X POST \
            "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
  
      - name: Wait for deployment to be ready
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          echo "⏳ Waiting for $TARGET to become healthy..."
          for i in {1..20}; do
            if curl --silent --fail "$TARGET/actuator/health" > /dev/null; then
              echo "✅ Application is healthy and ready!"
              exit 0
            fi
            echo "Attempt $i/20: not ready yet, retrying in 10s..."
            sleep 10
          done
          echo "❌ Application failed to start within timeout"
          exit 1

  dast:
    name: 🛡️ DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Wait for application to be ready
        run: |
          echo "Waiting for staging application to be ready..."
          for i in {1..30}; do
            if curl --silent --fail ${{ needs.deploy-staging.outputs.url }}/actuator/health > /dev/null; then
              echo "✅ Application is ready!"
              exit 0
            fi
            echo "⏳ Attempt $i: Application not ready yet, waiting 10 seconds..."
            sleep 10
          done
          echo "❌ Application failed to become ready within timeout"
          exit 1
      - name: Run ZAP Baseline Scan (console only)
        run: |
          echo "🚀 Starting ZAP scan against: ${{ needs.deploy-staging.outputs.url }}"
          set +e   # continue even if zap returns non-zero
          docker run --rm \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" \
            -a \
            -m 10 \
            -T 180 | tee zap-console.log
          echo "ZAP finished with exit code: $?"
          echo "🔎 Filtering only ALERTS and FAILURES..."
          grep -E "ALERT|FAIL" zap-console.log || true
          set -e

  deploy-production:
    name: 🚀 Deploy to Production (Heroku Docker)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main' && needs.security-gate.outputs.passed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Login to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "${HEROKU_API_KEY}" | docker login --username=_ --password-stdin registry.heroku.com
      - name: Build Docker image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .

      - name: Push Docker image to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release Docker image (use Authorization header)
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          curl --silent --show-error --fail -X POST \
            "https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/releases" \
            -d '{"slug":null,"description":"Deploy via GitHub Actions"}' \
            -H "Content-Type:application/json" \
            -H "Accept: application/vnd.heroku+json; version=3" \
            -H "Authorization: Bearer ${HEROKU_API_KEY}"

  # 🔄 CẬP NHẬT PHẦN REPORT
  report:
    name: 📊 Unified Security Report (HTML)
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: trivy-deps-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-container-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate Unified HTML Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html
          
          cat > $REPORT << 'EOF'
          <html>
          <head>
              <title>Security Scan Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .section { margin-bottom: 30px; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                  .critical { color: #d73a49; font-weight: bold; }
                  .high { color: #f66a0a; }
                  .passed { background-color: #d4edda; }
                  .failed { background-color: #f8d7da; }
                  pre { background: #f6f8fa; padding: 10px; border-radius: 3px; overflow-x: auto; }
              </style>
          </head>
          <body>
              <h1>🔒 Security Scan Report</h1>
              <p>Generated on: $(date)</p>
          EOF
          
          # SCA Section
          echo "<div class='section'><h2>📦 SCA - Dependency Vulnerabilities (Trivy)</h2>" >> $REPORT
          if [ -f reports/sca/trivy-deps-report.sarif ]; then
            CRITICAL=$(jq '[.runs[].results[]? | select(.severity == "critical")] | length' reports/sca/trivy-deps-report.sarif || echo "0")
            HIGH=$(jq '[.runs[].results[]? | select(.severity == "high")] | length' reports/sca/trivy-deps-report.sarif || echo "0")
            echo "<p><span class='critical'>CRITICAL: $CRITICAL</span> | <span class='high'>HIGH: $HIGH</span></p>" >> $REPORT
            echo "<pre>$(jq '.' reports/sca/trivy-deps-report.sarif | head -100)</pre>" >> $REPORT
          else
            echo "<p>No SCA report available</p>" >> $REPORT
          fi
          echo "</div>" >> $REPORT
          
          # Container Section
          echo "<div class='section'><h2>🐳 Container Vulnerabilities (Trivy)</h2>" >> $REPORT
          if [ -f reports/container/trivy-container-report.sarif ]; then
            CRITICAL=$(jq '[.runs[].results[]? | select(.severity == "critical")] | length' reports/container/trivy-container-report.sarif || echo "0")
            HIGH=$(jq '[.runs[].results[]? | select(.severity == "high")] | length' reports/container/trivy-container-report.sarif || echo "0")
            echo "<p><span class='critical'>CRITICAL: $CRITICAL</span> | <span class='high'>HIGH: $HIGH</span></p>" >> $REPORT
            echo "<pre>$(jq '.' reports/container/trivy-container-report.sarif | head -100)</pre>" >> $REPORT
          else
            echo "<p>No container scan report available</p>" >> $REPORT
          fi
          echo "</div>" >> $REPORT
          
          echo "</body></html>" >> $REPORT

      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html

  notify:
    name: 📢 Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, report]
    if: always()
    steps:
      - name: ✅ Notify Success
        if: ${{ success() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ✅ **Pipeline SUCCESS** cho `${{ github.repository }}`
            🔀 Branch: `${{ github.ref_name }}`
            📌 Status: **SUCCESS**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
      - name: ❌ Notify Failure
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ❌ **Pipeline FAILED** cho `${{ github.repository }}`
            🔀 Branch: `${{ github.ref_name }}`
            📌 Status: **FAILED**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
            🚨 Hãy kiểm tra lại logs chi tiết trong GitHub Action
