name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for SonarCloud analysis
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests with coverage
        run: |
          ./mvnw -B clean test jacoco:report
      - name: Package application
        run: |
          ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Cache OWASP Dependency-Check data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-
      - name: Run Dependency Check
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -Dformat=JSON \
            -Dnvd.api.enabled=false \
            -Dnvd.failOnError=false \
            -Ddependency-check.skipTestScope=true
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.*

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-report.sarif
          severity: CRITICAL,HIGH
          exit-code: 0  # Don't fail the job, let security gate handle it
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true  # Don't fail the job, let security gate handle it
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  security-gate:
    name: 🔒 Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
          
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
          
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
  
      - name: Check SonarCloud Quality Gate
        id: check-sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Kiểm tra Quality Gate từ SonarCloud API
          response=$(curl -s -u "${SONAR_TOKEN}:" \
            "https://sonarcloud.io/api/project_status?projectKey=AT180410_student-management&branch=${GITHUB_REF_NAME}")
          status=$(echo "$response" | jq -r '.projectStatus.status')
          echo "SonarCloud Quality Gate status: $status"
          if [ "$status" = "ERROR" ]; then
            echo "SonarCloud Quality Gate failed!"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
  
      - name: Analyze Security Reports
        id: check-gate
        run: |
          echo "🔒 Analyzing Security Reports..."
          FAIL=0
          
          # Phân tích SCA results (OWASP Dependency-Check)
          if [ -f reports/sca/dependency-check-report.json ]; then
            echo "📦 Analyzing SCA results..."
            # Sử dụng jq để phân tích JSON chính xác
            CRITICAL_COUNT=$(jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL" or .severity == "Critical") | .name' reports/sca/dependency-check-report.json | wc -l)
            HIGH_COUNT=$(jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH" or .severity == "High") | .name' reports/sca/dependency-check-report.json | wc -l)
            
            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "❌ SCA found $CRITICAL_COUNT Critical and $HIGH_COUNT High vulnerabilities"
              jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL" or .severity == "Critical" or .severity == "HIGH" or .severity == "High") | "\(.name) - \(.severity) - \(.description)"' reports/sca/dependency-check-report.json | head -5
              FAIL=1
            fi
          fi
  
          # Phân tích Container Scan results (Trivy SARIF format)
          if [ -f reports/container/trivy-report.sarif ]; then
            echo "🐳 Analyzing Container Scan results..."
            # Phân tích SARIF format chính xác
            CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.level == "error") | .ruleId' reports/container/trivy-report.sarif | wc -l)
            HIGH_COUNT=$(jq -r '.runs[0].results[]? | select(.level == "warning") | .ruleId' reports/container/trivy-report.sarif | wc -l)
            
            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "❌ Container scan found $CRITICAL_COUNT Critical and $HIGH_COUNT High vulnerabilities"
              jq -r '.runs[0].results[]? | select(.level == "error" or .level == "warning") | "\(.ruleId) - \(.level) - \(.message.text)"' reports/container/trivy-report.sarif | head -5
              FAIL=1
            fi
          fi
  
          # Phân tích IaC Scan results (Checkov SARIF format)
          if [ -f reports/iac/checkov-results.sarif ]; then
            echo "☁️ Analyzing IaC Scan results..."
            # Checkov sử dụng level: error = Critical, warning = High
            CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.level == "error") | .ruleId' reports/iac/checkov-results.sarif | wc -l)
            HIGH_COUNT=$(jq -r '.runs[0].results[]? | select(.level == "warning") | .ruleId' reports/iac/checkov-results.sarif | wc -l)
            
            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "❌ IaC scan found $CRITICAL_COUNT Critical and $HIGH_COUNT High vulnerabilities"
              jq -r '.runs[0].results[]? | select(.level == "error" or .level == "warning") | "\(.ruleId) - \(.level) - \(.message.text)"' reports/iac/checkov-results.sarif | head -5
              FAIL=1
            fi
          fi
  
          # Kiểm tra DAST results nếu có
          if [ -f reports/dast/zap-report.json ]; then
            echo "🌐 Analyzing DAST results..."
            # ZAP risk code: 3 = High, 4 = Critical
            CRITICAL_COUNT=$(jq -r '.site[]?.alerts[]? | select(.riskcode == "4") | .alert' reports/dast/zap-report.json | wc -l)
            HIGH_COUNT=$(jq -r '.site[]?.alerts[]? | select(.riskcode == "3") | .alert' reports/dast/zap-report.json | wc -l)
            
            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "❌ DAST found $CRITICAL_COUNT Critical and $HIGH_COUNT High vulnerabilities"
              jq -r '.site[]?.alerts[]? | select(.riskcode == "4" or .riskcode == "3") | "\(.alert) - Risk: \(.riskcode) - \(.desc)"' reports/dast/zap-report.json | head -5
              FAIL=1
            fi
          fi
  
          if [ "$FAIL" -eq 1 ]; then
            echo "❌ Security Gate failed - Found critical/high vulnerabilities"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Security Gate passed - No critical/high vulnerabilities found"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: security-gate
    if: needs.security-gate.outputs.passed == 'true' && (github.ref == 'refs/heads/test' || github.event_name == 'pull_request')
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: |
          echo "url=https://student-management-test.onrender.com" >> $GITHUB_OUTPUT
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-$SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json"
      - name: Wait for deployment to be ready
        run: |
          for i in {1..20}; do
            if curl -fs ${{ steps.set-url.outputs.url }}/actuator/health; then
              echo "✅ Application is healthy!"
              exit 0
            fi
            echo "⏳ Application not ready yet, retrying in 10s..."
            sleep 10
          done
          echo "❌ Application failed to start within timeout"
          exit 1

  dast:
    name: 🔍 DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: needs.deploy-staging.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline Scan
        env:
          TARGET_URL: ${{ needs.deploy-staging.outputs.url }}
        run: |
          docker run --rm \
            -v $(pwd):/zap/wrk:rw \
            -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t $TARGET_URL \
            -a -m 5 \
            -r zap-report.html \
            -w zap-report.md \
            -J zap-report.json \
            || true  # Don't fail the job for ZAP findings
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: "*.html"
      - name: Convert ZAP report to SARIF
        uses: github/sarif-tools@v1
        with:
          input: zap-report.json
          output: zap-report.sarif
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-report.sarif

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-gate, dast]
    if: |
      needs.security-gate.outputs.passed == 'true' &&
      github.ref == 'refs/heads/main' &&
      (needs.dast.result == 'success' || needs.dast.result == 'skipped')
    steps:
      - name: Trigger Production Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_PROD }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-$SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json"

  report:
    name: 📊 Unified Security Report
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, dast]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - uses: actions/download-artifact@v4
        with:
          name: zap-report
          path: reports/dast
      
      - name: Generate Unified HTML Report
        run: |
          # Create comprehensive security report
          echo "<html><head><title>Security Scan Report</title></head><body>" > security-report.html
          echo "<h1>Security Scan Report</h1>" >> security-report.html
          echo "<p>Generated at: $(date)</p>" >> security-report.html
          
          # Add SonarCloud section
          echo "<h2>SAST Results (SonarCloud)</h2>" >> security-report.html
          echo "<p>Quality Gate Status: ${{ needs.sast.result }}</p>" >> security-report.html
          
          # Add other sections similarly...
          echo "</body></html>" >> security-report.html
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.html

  notify:
    name: 📢 Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-production, report]
    if: always()
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "Deployment Status: ${{ job.status }}"
          description: |
            Pipeline completed for ${{ github.repository }} on ${{ github.ref_name }}
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **DAST:** ${{ needs.dast.result }}
          color: ${{ job.status == 'success' && '65280' || '16711680' }}
