name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Trivy for Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
  
      - name: Setup Java for Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
  
      - name: Build with Maven to generate dependencies
        run: |
          chmod +x ./mvnw
          ./mvnw -B compile dependency:tree
  
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-sca-${{ github.run_id }}
  
      - name: Run Trivy vulnerability scanner for dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-deps-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          trivyignores: .trivyignore
  
      - name: Upload Trivy SCA report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif
  
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy for Docker Image)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
  
      - name: Build Docker image
        run: docker build -t student-management:latest .
  
      # Cache Trivy DB (reset m·ªói run)
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-container-${{ github.run_id }}
  
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: 'sarif'
          output: 'trivy-container-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          trivyignores: .trivyignore
  
      - name: Upload Trivy Container report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: trivy-container-report.sarif
  
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IoC scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

# üîí FIXED SECURITY GATE - CORRECT SEVERITY PARSING
  security-gate:
    name: üîí Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
      critical_count: ${{ steps.check-gate.outputs.critical_count }}
      high_count: ${{ steps.check-gate.outputs.high_count }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
  
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
  
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
  
      - name: Debug SARIF severity fields
        run: |
          echo "üîç Debugging SARIF severity fields..."
          if [ -f "reports/trivy-deps-report.sarif" ]; then
            echo "=== First 3 results with all severity fields ==="
            jq '.runs[0].results[0:3] | .[] | {ruleId, level, properties}' "reports/trivy-deps-report.sarif" || echo "Cannot parse"
          fi
  
      - name: Analyze Security Reports - CORRECT SEVERITY
        id: check-gate
        run: |
          set -e
          echo "üîí Analyzing Security Reports with Correct Severity Parsing..."
          FAIL=0
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          VULNERABILITIES=""
          
          # Function to parse SARIF file with correct severity mapping
          parse_sarif() {
            local file=$1
            local tool=$2
            
            if [ ! -f "$file" ]; then
              echo "‚ö†Ô∏è No $tool report found: $file"
              return
            fi
            
            echo "üìä Analyzing $tool report..."
            
            local critical_count=0
            local high_count=0
            local vuln_details=""
            
            # Parse each result with CORRECT severity mapping
            while IFS= read -r result; do
              if [ -n "$result" ]; then
                local ruleId=$(echo "$result" | jq -r '.ruleId // "unknown"' 2>/dev/null)
                local message=$(echo "$result" | jq -r '.message.text // "No description"' 2>/dev/null | head -100)
                
                # CORRECT SEVERITY EXTRACTION - Based on actual Trivy output
                # Trivy stores severity in the message text, not in properties
                local severity="UNKNOWN"
                
                # Extract severity from message text (the correct way for Trivy)
                if echo "$message" | grep -qi "Severity: CRITICAL"; then
                  severity="CRITICAL"
                elif echo "$message" | grep -qi "Severity: HIGH"; then
                  severity="HIGH" 
                elif echo "$message" | grep -qi "Severity: MEDIUM"; then
                  severity="MEDIUM"
                elif echo "$message" | grep -qi "Severity: LOW"; then
                  severity="LOW"
                else
                  # Fallback: try to extract from properties or level
                  severity=$(echo "$result" | jq -r '
                    .level? // 
                    .properties.severity? // 
                    "UNKNOWN"
                  ' 2>/dev/null | tr '[:lower:]' '[:upper:]')
                fi
                
                # DEBUG: Print severity detection
                echo "DEBUG: $ruleId - Severity: $severity"
                
                # CORRECT COUNTING - Only count actual CRITICAL as critical
                case "$severity" in
                  "CRITICAL")
                    critical_count=$((critical_count + 1))
                    vuln_details+="üö® CRITICAL ($tool): $ruleId - $message"$'\n'
                    ;;
                  "HIGH")
                    high_count=$((high_count + 1))
                    vuln_details+="‚ö†Ô∏è HIGH ($tool): $ruleId - $message"$'\n'
                    ;;
                  "MEDIUM"|"LOW"|"UNKNOWN")
                    # Ignore for gate purposes, but could log if needed
                    ;;
                esac
              fi
            done < <(jq -c '.runs[0].results[]?' "$file" 2>/dev/null || echo "")
            
            echo "üîç $tool - TRUE CRITICAL: $critical_count, HIGH: $high_count"
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + critical_count))
            TOTAL_HIGH=$((TOTAL_HIGH + high_count))
            VULNERABILITIES+="$vuln_details"
            
            if [ "$critical_count" -gt 0 ]; then
              FAIL=1
            fi
          }
          
          # Analyze all reports
          parse_sarif "reports/trivy-deps-report.sarif" "SCA"
          parse_sarif "reports/trivy-container-report.sarif" "Container"
          parse_sarif "reports/iac/checkov-results.sarif" "IaC"
          
          echo "üìä TRUE SECURITY SUMMARY:"
          echo "========================================"
          echo "üö® ACTUAL CRITICAL Vulnerabilities: $TOTAL_CRITICAL"
          echo "‚ö†Ô∏è HIGH Vulnerabilities: $TOTAL_HIGH"
          echo "========================================"
          
          if [ -n "$VULNERABILITIES" ]; then
            echo "üîç DETAILED FINDINGS:"
            echo "$VULNERABILITIES"
          else
            echo "‚úÖ No critical or high vulnerabilities found"
          fi
          
          # Set outputs - Only fail on ACTUAL CRITICAL
          echo "passed=$([ $TOTAL_CRITICAL -eq 0 ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "critical_count=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high_count=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          
          if [ $TOTAL_CRITICAL -gt 0 ]; then
            echo "‚ùå Security Gate FAILED - $TOTAL_CRITICAL TRUE CRITICAL vulnerabilities found"
            exit 1
          else
            echo "‚úÖ Security Gate PASSED - Only $TOTAL_HIGH HIGH vulnerabilities (no CRITICAL)"
          fi
          
  deploy-staging:
    name: üöÄ Deploy to Staging (Heroku Docker)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/test' && needs.security-gate.outputs.passed == 'true'
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - uses: actions/checkout@v4
  
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
  
      - name: Log in to Heroku Container Registry
        run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com
  
      - name: Build Docker image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME_STAGING }}/web .
  
      - name: Push Docker image to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME_STAGING }}/web
  
      - name: Release app on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
          HEROKU_APP_NAME_STAGING: ${{ secrets.HEROKU_APP_NAME_STAGING }}
        run: |
          if [ -z "$HEROKU_APP_NAME_STAGING" ]; then
            echo "‚ùå HEROKU_APP_NAME_STAGING is not set. Please configure it in GitHub Secrets."
            exit 1
          fi
          echo "üöÄ Releasing staging app on Heroku..."
          heroku container:release web --app "$HEROKU_APP_NAME_STAGING"
  
      - name: Set environment URL
        id: set-url
        run: |
          echo "url=https://${{ secrets.HEROKU_APP_NAME_STAGING }}.herokuapp.com" >> $GITHUB_OUTPUT

  dast:
    name: üõ°Ô∏è DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Wait for application to be ready
        run: |
          echo "Waiting for staging application to be ready..."
          for i in {1..30}; do
            if curl --silent --fail ${{ needs.deploy-staging.outputs.url }}/actuator/health > /dev/null; then
              echo "‚úÖ Application is ready!"
              exit 0
            fi
            echo "‚è≥ Attempt $i: Application not ready yet, waiting 10 seconds..."
            sleep 10
          done
          echo "‚ùå Application failed to become ready within timeout"
          exit 1
      - name: Run ZAP Baseline Scan (console only)
        run: |
          echo "üöÄ Starting ZAP scan against: ${{ needs.deploy-staging.outputs.url }}"
          set +e
          docker run --rm \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" \
            -a \
            -m 10 \
            -T 180 | tee zap-console.log
          echo "ZAP finished with exit code: $?"
          echo "üîé Filtering only ALERTS and FAILURES..."
          grep -E "ALERT|FAIL" zap-console.log || true
          set -e

  deploy-production:
    name: üöÄ Deploy to Production (Heroku Docker)
    runs-on: ubuntu-latest
    needs: security-gate
    if: |
      needs.security-gate.outputs.passed == 'true' &&
      github.ref == 'refs/heads/main' 
    steps:
      - uses: actions/checkout@v4
  
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
  
      - name: Log in to Heroku Container Registry
        run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com
  
      - name: Build Docker image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .
  
      - name: Push Docker image to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
        
      - name: Release app on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          if [ -z "$HEROKU_APP_NAME" ]; then
            echo "‚ùå HEROKU_APP_NAME is not set. Please configure it in GitHub Secrets."
            exit 1
          fi
          echo "üöÄ Releasing app on Heroku..."
          heroku container:release web --app "$HEROKU_APP_NAME"


  # üìä FIXED REPORT - CORRECT SEVERITY DISPLAY
  report:
    name: üìä Unified Security Report
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, security-gate]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
  
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
  
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
  
      - name: Generate Accurate HTML Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html
          
          # Get TRUE security gate results
          CRITICAL_COUNT="${{ needs.security-gate.outputs.critical_count || 0 }}"
          HIGH_COUNT="${{ needs.security-gate.outputs.high_count || 0 }}"
          GATE_PASSED="${{ needs.security-gate.outputs.passed || 'false' }}"
          
          cat > $REPORT << 'EOF'
          <html>
          <head>
              <title>üîí Accurate Security Scan Report</title>
              <meta charset="UTF-8">
              <style>
                  :root {
                      --critical: #d32f2f;
                      --high: #f57c00;
                      --medium: #fbc02d;
                      --low: #388e3c;
                      --passed: #4caf50;
                      --failed: #d32f2f;
                  }
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      margin: 40px; 
                      background-color: #f5f5f5; 
                  }
                  .container { 
                      max-width: 1400px; 
                      margin: 0 auto; 
                      background: white; 
                      padding: 30px; 
                      border-radius: 10px; 
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
                  }
                  .header { 
                      text-align: center; 
                      margin-bottom: 30px; 
                      padding-bottom: 20px; 
                      border-bottom: 2px solid #eee; 
                  }
                  .summary { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                      gap: 20px; 
                      margin-bottom: 30px; 
                  }
                  .card { 
                      padding: 20px; 
                      border-radius: 8px; 
                      text-align: center; 
                  }
                  .critical { background-color: #ffebee; border-left: 4px solid var(--critical); }
                  .high { background-color: #fff3e0; border-left: 4px solid var(--high); }
                  .passed { background-color: #e8f5e8; border-left: 4px solid var(--passed); }
                  .failed { background-color: #ffebee; border-left: 4px solid var(--failed); }
                  .vuln-list { margin: 20px 0; }
                  .vuln-item { 
                      padding: 15px; 
                      margin: 10px 0; 
                      border-radius: 5px; 
                      background: #fafafa; 
                      border-left: 4px solid;
                  }
                  .vuln-critical { border-left-color: var(--critical); }
                  .vuln-high { border-left-color: var(--high); }
                  .timestamp { color: #666; font-size: 14px; }
                  .severity-note { 
                      background: #e3f2fd; 
                      padding: 10px; 
                      border-radius: 5px; 
                      margin: 10px 0;
                      font-size: 14px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üîí Accurate Security Scan Report</h1>
                      <p class="timestamp">Generated on: $(date +"%Y-%m-%d %H:%M:%S")</p>
                      <div class="severity-note">
                          <strong>Note:</strong> Severity classification corrected - Only actual CRITICAL vulnerabilities block deployment
                      </div>
                  </div>
          EOF
          
          # Summary Section with ACCURATE counts
          echo "<div class='summary'>" >> $REPORT
          echo "<div class='card critical'><h3>üö® True CRITICAL</h3><h1>$CRITICAL_COUNT</h1><p>Blocks deployment</p></div>" >> $REPORT
          echo "<div class='card high'><h3>‚ö†Ô∏è HIGH Vulnerabilities</h3><h1>$HIGH_COUNT</h1><p>Should be addressed</p></div>" >> $REPORT
          
          if [ "$GATE_PASSED" = "true" ]; then
              echo "<div class='card passed'><h3>‚úÖ Security Status</h3><h1>PASSED</h1><p>No true CRITICAL vulnerabilities</p></div>" >> $REPORT
          else
              echo "<div class='card failed'><h3>‚ùå Security Status</h3><h1>FAILED</h1><p>$CRITICAL_COUNT true CRITICAL vulnerabilities</p></div>" >> $REPORT
          fi
          echo "</div>" >> $REPORT
          
          # Function to extract TRUE severity from Trivy reports
          extract_true_severity() {
              local file=$1
              local tool=$2
              
              if [ ! -f "$file" ]; then
                  echo "<div class='card'><h2>üì¶ $tool</h2><p>No report available</p></div>" >> $REPORT
                  return
              fi
              
              local critical_vulns=""
              local high_vulns=""
              
              # Parse with CORRECT severity extraction
              while IFS= read -r result; do
                  if [ -n "$result" ]; then
                      local ruleId=$(echo "$result" | jq -r '.ruleId // "Unknown"' 2>/dev/null)
                      local message=$(echo "$result" | jq -r '.message.text // "No description"' 2>/dev/null | sed 's/</\&lt;/g; s/>/\&gt;/g')
                      
                      # EXTRACT TRUE SEVERITY from message (Trivy's actual format)
                      local severity="UNKNOWN"
                      if echo "$message" | grep -qi "Severity: CRITICAL"; then
                          severity="CRITICAL"
                      elif echo "$message" | grep -qi "Severity: HIGH"; then
                          severity="HIGH"
                      elif echo "$message" | grep -qi "Severity: MEDIUM"; then
                          severity="MEDIUM"
                      elif echo "$message" | grep -qi "Severity: LOW"; then
                          severity="LOW"
                      fi
                      
                      local html_output=""
                      case "$severity" in
                          "CRITICAL")
                              html_output="<div class='vuln-item vuln-critical'><strong>üö® $ruleId</strong><br>True Severity: CRITICAL<br>$message</div>"
                              critical_vulns+="$html_output"
                              ;;
                          "HIGH")
                              html_output="<div class='vuln-item vuln-high'><strong>‚ö†Ô∏è $ruleId</strong><br>True Severity: HIGH<br>$message</div>"
                              high_vulns+="$html_output"
                              ;;
                      esac
                  fi
              done < <(jq -c '.runs[0].results[]?' "$file" 2>/dev/null || echo "")
              
              # Display section
              echo "<div class='card'><h2>üì¶ $tool</h2>" >> $REPORT
              echo "<div class='vuln-list'>" >> $REPORT
              
              local critical_count=$(echo "$critical_vulns" | grep -c "vuln-critical" || true)
              local high_count=$(echo "$high_vulns" | grep -c "vuln-high" || true)
              
              echo "<p><span style='color: #d32f2f; font-weight: bold;'>True CRITICAL: $critical_count</span> | <span style='color: #f57c00; font-weight: bold;'>HIGH: $high_count</span></p>" >> $REPORT
              
              if [ -n "$critical_vulns" ]; then
                  echo "<h4>üö® True CRITICAL Vulnerabilities:</h4>" >> $REPORT
                  echo "$critical_vulns" >> $REPORT
              fi
              
              if [ -n "$high_vulns" ]; then
                  echo "<h4>‚ö†Ô∏è HIGH Vulnerabilities:</h4>" >> $REPORT
                  echo "$high_vulns" >> $REPORT
              fi
              
              if [ -z "$critical_vulns" ] && [ -z "$high_vulns" ]; then
                  echo "<p>‚úÖ No critical or high vulnerabilities found</p>" >> $REPORT
              fi
              
              echo "</div></div>" >> $REPORT
          }
          
          # Generate accurate sections
          extract_true_severity "reports/trivy-deps-report.sarif" "SCA - Software Composition Analysis"
          extract_true_severity "reports/trivy-container-report.sarif" "Container Security Scan"
          extract_true_severity "reports/iac/checkov-results.sarif" "IaC Security Scan"
          
          cat >> $REPORT << 'EOF'
              </div>
          </body>
          </html>
          EOF
          
          echo "üìä Generated ACCURATE security report:"
          echo "   üö® True CRITICAL: $CRITICAL_COUNT"
          echo "   ‚ö†Ô∏è HIGH: $HIGH_COUNT"
          echo "   ‚úÖ Gate Status: $GATE_PASSED"
  
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html

  notify:
    name: üì¢ Notify Discord
    runs-on: ubuntu-latest
    needs: [sast, sca, container-scan, iac-scan, dast, security-gate, deploy-staging, deploy-production, report]
    if: always()
    steps:
      - name: üìä T√≠nh tr·∫°ng th√°i t·ªïng th·ªÉ
        id: status
        run: |
          overall="SUCCESS"
  
          if [ "${{ needs.sast.result }}" = "failure" ] || \
             [ "${{ needs.sca.result }}" = "failure" ] || \
             [ "${{ needs.container-scan.result }}" = "failure" ] || \
             [ "${{ needs.iac-scan.result }}" = "failure" ] || \
             [ "${{ needs.dast.result }}" = "failure" ] || \
             [ "${{ needs.security-gate.result }}" = "failure" ] || \
             [ "${{ needs.deploy-staging.result }}" = "failure" ] || \
             [ "${{ needs.deploy-production.result }}" = "failure" ] || \
             [ "${{ needs.report.result }}" = "failure" ]; then
               overall="FAILED"
          fi
  
          echo "overall=$overall" >> $GITHUB_OUTPUT
  
      - name: üì¢ G·ª≠i k·∫øt qu·∫£ l√™n Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            üì¢ **Pipeline Result** cho `${{ github.repository }}`
            üîÄ Branch: `${{ github.ref_name }}`
            üìå Tr·∫°ng th√°i t·ªïng th·ªÉ: **${{ steps.status.outputs.overall }}**
  
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
            **Security Gate:** ${{ needs.security-gate.result }}
            **Staging Deploy:** ${{ needs.deploy-staging.result }}
            **Production Deploy:** ${{ needs.deploy-production.result }}
            **Report:** ${{ needs.report.result }}
  
