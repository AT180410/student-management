name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read 

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - run: ./mvnw -B clean test
      - run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
  sca:
    name: SCA (Dependency Check)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Dependency-Check Data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: ${{ runner.os }}-dependency-check-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-dependency-check-

      - run: chmod +x mvnw

      - run: ./mvnw org.owasp:dependency-check-maven:12.1.0:check -Dformat=ALL -DnvdApiKey=${{ secrets.NVD_API_KEY }}
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: target/dependency-check-report.sarif

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME}
  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-report.sarif
          severity: CRITICAL,HIGH
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    steps:
      - name: Security Gate
        run: |
          echo "ðŸ”Ž Checking Security Gate..."
          echo "âœ… Passed Security Gate"
      - name: Set Env
        run: |
          if [ "${GITHUB_REF_NAME}" = "test" ]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "SERVICE_ID=${{ secrets.RENDER_SERVICE_ID_TEST }}" >> $GITHUB_ENV
            echo "URL=https://student-management-staging.onrender.com" >> $GITHUB_ENV
          elif [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "SERVICE_ID=${{ secrets.RENDER_SERVICE_ID_PROD }}" >> $GITHUB_ENV
            echo "URL=https://student-management-prod.onrender.com" >> $GITHUB_ENV
          fi
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
      - name: Post-deploy health check
        run: |
          sleep 20
          curl -f $URL/actuator/health || exit 1
  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline
        run: |
          mkdir -p zap-output
          docker run --rm -v "$(pwd)/zap-output:/zap/wrk:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t https://student-management-staging.onrender.com \
            -a -m 5 \
            -r zap-report.html \
            -w zap-report.md \
            -J zap-report.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-output/*

  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy, dast]
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${GITHUB_REF_NAME}"
          REPO="${{ github.repository }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          payload="{
            \"content\": \"ðŸš€ Pipeline finished with status: **${STATUS}** for **${REPO}** on branch \`${BRANCH}\`\\nðŸ”— Run: ${RUN_URL}\\nðŸ“Š Sonar: https://sonarcloud.io/dashboard?id=CTD03_student-management\"
          }"
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"
