name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Cache OWASP Dependency-Check data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-
      - name: Run Dependency Check
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -Dformat=JSON \
            -Dnvd.api.enabled=false \
            -Dnvd.failOnError=false \
            -Ddependency-check.skipTestScope=true
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.*

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-report.sarif
          severity: CRITICAL
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  security-gate:
    name: üîí Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
        
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
        
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac

      - name: Analyze Security Reports
        id: check-gate
        run: |
          echo "üîí Analyzing Security Reports..."
          FAIL=0

           if [ -f reports/container/trivy-report.sarif ]; then
                echo "üê≥ Analyzing Container Scan results..."
                CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL") | .ruleId' reports/container/trivy-report.sarif | wc -l)
                if [ "$CRITICAL_COUNT" -eq 0 ]; then
                  CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.message.text | test("CRITICAL")) | .ruleId' reports/container/trivy-report.sarif | wc -l)
                fi
                if [ "$CRITICAL_COUNT" -gt 0 ]; then
                  echo "‚ùå Container scan found $CRITICAL_COUNT CRITICAL vulnerabilities"
                  jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL" or (.message.text | test("CRITICAL"))) | "\(.ruleId) - CRITICAL - \(.message.text)"' reports/container/trivy-report.sarif | head -5
                  FAIL=1
                fi
              fi

          # SCA scan
          if [ -f reports/sca/dependency-check-report.json ]; then
            CRIT_COUNT=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL")] | length' reports/sca/dependency-check-report.json)
            HIGH_COUNT=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH")] | length' reports/sca/dependency-check-report.json)
            if [ "$CRIT_COUNT" -gt 0 ]; then
              echo "‚ùå SCA found $CRIT_COUNT CRITICAL vulnerabilities"
              FAIL=1
            fi
            echo "‚ÑπÔ∏è SCA HIGH vulnerabilities: $HIGH_COUNT"
          fi

          # IaC scan
          if [ -f reports/iac/checkov-results.sarif ]; then
            CRIT_COUNT=$(jq '[.runs[0].results[]? | select((.properties.severity? // "") == "CRITICAL" or (.level=="error"))] | length' reports/iac/checkov-results.sarif)
            HIGH_COUNT=$(jq '[.runs[0].results[]? | select((.properties.severity? // "") == "HIGH" or (.level=="warning"))] | length' reports/iac/checkov-results.sarif)
            if [ "$CRIT_COUNT" -gt 0 ]; then
              echo "‚ùå IaC scan found $CRIT_COUNT CRITICAL vulnerabilities"
              FAIL=1
            fi
            echo "‚ÑπÔ∏è IaC HIGH vulnerabilities: $HIGH_COUNT"
          fi

          if [ "$FAIL" -eq 1 ]; then
            echo "‚ùå Security Gate failed - Found CRITICAL vulnerabilities"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Security Gate passed - No CRITICAL vulnerabilities found"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: security-gate
    if: needs.security-gate.outputs.passed == 'true' && (github.ref == 'refs/heads/test' || github.event_name == 'pull_request')
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: |
          echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
      - name: Wait for deployment to be ready
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          for i in {1..20}; do
            if curl -fs $TARGET/actuator/health; then
              echo "‚úÖ Application is healthy!"
              exit 0
            fi
            echo "‚è≥ Application not ready yet, retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Application failed to start within timeout"
          exit 1

  dast:
    name: üõ°Ô∏è DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: needs.deploy-staging.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: Create output folder
        run: mkdir -p zap-output
      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm \
            -v "${{ github.workspace }}/zap-output:/zap/wrk" \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t ${{ needs.deploy-staging.outputs.url }} \
            -r /zap/wrk/zap-report.html \
            -J /zap/wrk/zap-report.json \
            || true
      - name: Upload ZAP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-output/*
      - name: Convert JSON to SARIF
        run: |
          npm install -g @microsoft/sarif-multitool
          sarif-multitool convert -t ZAP -i zap-output/zap-report.json -o zap-output/zap-report.sarif
        continue-on-error: true
      - name: Upload SARIF results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-output/zap-report.sarif
        continue-on-error: true

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-gate, dast]
    if: |
      needs.security-gate.outputs.passed == 'true' &&
      github.ref == 'refs/heads/main' &&
      (needs.dast.result == 'success' || needs.dast.result == 'skipped')
    steps:
      - name: Trigger Production Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_PROD }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"

  report:
    name: üìä Unified Security Report (HTML)
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, dast]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - uses: actions/download-artifact@v4
        with:
          name: zap-report
          path: reports/dast
      - name: Generate Unified HTML Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html
          # ... (gi·ªØ nguy√™n code HTML generation nh∆∞ tr∆∞·ªõc)
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html

  notify:
    name: üì¢ Notify Discord
    runs-on: ubuntu-latest
    needs: report
    if: always()
    steps:
      - name: ‚úÖ Notify Success
        if: ${{ success() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ‚úÖ **Pipeline SUCCESS** cho `${{ github.repository }}`
            üîÄ Branch: `${{ github.ref_name }}`
            üìå Status: **SUCCESS**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
  
      - name: ‚ùå Notify Failure
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ‚ùå **Pipeline FAILED** cho `${{ github.repository }}`
            üîÄ Branch: `${{ github.ref_name }}`
            üìå Status: **FAILED**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
            üö® H√£y ki·ªÉm tra l·∫°i logs chi ti·∫øt trong GitHub Actions!
