name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Trivy for Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java for Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Build with Maven to generate dependencies
        run: |
          chmod +x ./mvnw
          ./mvnw -B compile dependency:tree
          
      - name: Run Trivy vulnerability scanner for dependencies
        uses: aquasecurity/trivy-action@master
        id: trivy-deps
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-deps-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0

      - name: Upload Trivy SCA report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-container-report.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: trivy-container-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IoC scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

 # üîí FIXED SECURITY GATE - CORRECT SARIF PARSING
  security-gate:
    name: üîí Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
      critical_count: ${{ steps.check-gate.outputs.critical_count }}
      high_count: ${{ steps.check-gate.outputs.high_count }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
  
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
  
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
  
      - name: Debug SARIF structure
        run: |
          echo "üîç Debugging SARIF structure..."
          if [ -f "reports/trivy-deps-report.sarif" ]; then
            echo "=== SCA SARIF Structure Sample ==="
            jq '.runs[0].results[0] | {ruleId, message, level, properties}' "reports/trivy-deps-report.sarif" || echo "Cannot parse"
          fi
  
      - name: Analyze Security Reports - FIXED
        id: check-gate
        run: |
          set -e
          echo "üîí Analyzing Security Reports with Correct SARIF Parsing..."
          FAIL=0
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          VULNERABILITIES=""
          
          # Function to parse SARIF file correctly
          parse_sarif() {
            local file=$1
            local tool=$2
            
            if [ ! -f "$file" ]; then
              echo "‚ö†Ô∏è No $tool report found: $file"
              return
            fi
            
            echo "üìä Analyzing $tool report..."
            
            # Parse using jq to extract severity correctly
            local critical_count=0
            local high_count=0
            local vuln_details=""
            
            # Method 1: Check severity in properties or level field
            while IFS= read -r result; do
              if [ -n "$result" ]; then
                local ruleId=$(echo "$result" | jq -r '.ruleId // "unknown"' 2>/dev/null)
                local message=$(echo "$result" | jq -r '.message.text // "No description"' 2>/dev/null)
                
                # Try multiple ways to get severity
                local severity=$(echo "$result" | jq -r '
                  .properties.severity? // 
                  .level? // 
                  (.properties.tags[]? | select(. | test("CRITICAL|HIGH|MEDIUM|LOW"; "i"))) // 
                  "UNKNOWN"
                ' 2>/dev/null || echo "UNKNOWN")
                
                # Convert to uppercase for consistent comparison
                severity=$(echo "$severity" | tr '[:lower:]' '[:upper:]')
                
                # Count based on severity
                case "$severity" in
                  "CRITICAL"|"ERROR")
                    critical_count=$((critical_count + 1))
                    vuln_details+="üö® CRITICAL ($tool): $ruleId - $message"$'\n'
                    ;;
                  "HIGH"|"WARNING")
                    high_count=$((high_count + 1))
                    vuln_details+="‚ö†Ô∏è HIGH ($tool): $ruleId - $message"$'\n'
                    ;;
                esac
              fi
            done < <(jq -c '.runs[0].results[]?' "$file" 2>/dev/null || echo "")
            
            # Method 2: If no results found, try alternative parsing
            if [ "$critical_count" -eq 0 ] && [ "$high_count" -eq 0 ]; then
              echo "üîÑ Trying alternative parsing method..."
              critical_count=$(jq -r '
                [.runs[0].results[]? | 
                select(
                  (.level? // "UNKNOWN" | ascii_upcase | contains("ERROR")) or
                  (.properties.severity? // "UNKNOWN" | ascii_upcase | contains("CRITICAL")) or
                  (any(.properties.tags[]?; . | ascii_upcase | contains("CRITICAL")))
                )] | length' "$file" 2>/dev/null || echo "0")
              
              high_count=$(jq -r '
                [.runs[0].results[]? | 
                select(
                  (.level? // "UNKNOWN" | ascii_upcase | contains("WARNING")) or
                  (.properties.severity? // "UNKNOWN" | ascii_upcase | contains("HIGH")) or
                  (any(.properties.tags[]?; . | ascii_upcase | contains("HIGH")))
                )] | length' "$file" 2>/dev/null || echo "0")
            fi
            
            echo "üîç $tool - CRITICAL: $critical_count, HIGH: $high_count"
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + critical_count))
            TOTAL_HIGH=$((TOTAL_HIGH + high_count))
            VULNERABILITIES+="$vuln_details"
            
            if [ "$critical_count" -gt 0 ]; then
              FAIL=1
            fi
          }
          
          # Analyze all reports
          parse_sarif "reports/trivy-deps-report.sarif" "SCA"
          parse_sarif "reports/trivy-container-report.sarif" "Container"
          parse_sarif "reports/iac/checkov-results.sarif" "IaC"
          
          echo "üìä SECURITY SUMMARY:"
          echo "========================================"
          echo "üö® CRITICAL Vulnerabilities: $TOTAL_CRITICAL"
          echo "‚ö†Ô∏è HIGH Vulnerabilities: $TOTAL_HIGH"
          echo "========================================"
          
          if [ -n "$VULNERABILITIES" ]; then
            echo "üîç DETAILED FINDINGS:"
            echo "$VULNERABILITIES"
          else
            echo "‚úÖ No critical or high vulnerabilities found"
          fi
          
          # Set outputs
          echo "passed=$([ $TOTAL_CRITICAL -eq 0 ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "critical_count=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high_count=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          
          if [ $TOTAL_CRITICAL -gt 0 ]; then
            echo "‚ùå Security Gate FAILED - $TOTAL_CRITICAL critical vulnerabilities found"
            exit 1
          else
            echo "‚úÖ Security Gate PASSED"
          fi
        
  deploy-staging:
    name: üöÄ Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/test' && needs.security-gate.outputs.passed == 'true'
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: |
          echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
  
      - name: Trigger Render Deploy (use Authorization header)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          echo "üöÄ Triggering Render deploy for service: $SERVICE_ID"
          curl --silent --show-error --fail -X POST \
            "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
  
      - name: Wait for deployment to be ready
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          echo "‚è≥ Waiting for $TARGET to become healthy..."
          for i in {1..20}; do
            if curl --silent --fail "$TARGET/actuator/health" > /dev/null; then
              echo "‚úÖ Application is healthy and ready!"
              exit 0
            fi
            echo "Attempt $i/20: not ready yet, retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Application failed to start within timeout"
          exit 1

  dast:
    name: üõ°Ô∏è DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Wait for application to be ready
        run: |
          echo "Waiting for staging application to be ready..."
          for i in {1..30}; do
            if curl --silent --fail ${{ needs.deploy-staging.outputs.url }}/actuator/health > /dev/null; then
              echo "‚úÖ Application is ready!"
              exit 0
            fi
            echo "‚è≥ Attempt $i: Application not ready yet, waiting 10 seconds..."
            sleep 10
          done
          echo "‚ùå Application failed to become ready within timeout"
          exit 1
      - name: Run ZAP Baseline Scan (console only)
        run: |
          echo "üöÄ Starting ZAP scan against: ${{ needs.deploy-staging.outputs.url }}"
          set +e
          docker run --rm \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" \
            -a \
            -m 10 \
            -T 180 | tee zap-console.log
          echo "ZAP finished with exit code: $?"
          echo "üîé Filtering only ALERTS and FAILURES..."
          grep -E "ALERT|FAIL" zap-console.log || true
          set -e

  deploy-production:
      name: üöÄ Deploy to Production (Heroku Docker)
      runs-on: ubuntu-latest
      needs: security-gate
      if: |
        needs.security-gate.outputs.passed == 'true' &&
        github.ref == 'refs/heads/main' 
      steps:
        - uses: actions/checkout@v4
  
        # C√†i Heroku CLI
        - name: Set up Heroku CLI
          uses: heroku/actions/setup@v2
  
        - name: Log in to Heroku Container Registry
          run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com
  
        - name: Build Docker image
          run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .
  
        - name: Push Docker image to Heroku
          run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
  
        - name: Release app on Heroku
          run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
          env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
            HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

# üìä FIXED UNIFIED SECURITY REPORT
  report:
    name: üìä Unified Security Report
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, security-gate]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
  
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
  
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
  
      - name: Generate Comprehensive HTML Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html
          
          # Get security gate results
          CRITICAL_COUNT="${{ needs.security-gate.outputs.critical_count || 0 }}"
          HIGH_COUNT="${{ needs.security-gate.outputs.high_count || 0 }}"
          GATE_PASSED="${{ needs.security-gate.outputs.passed || 'false' }}"
          
          cat > $REPORT << 'EOF'
          <html>
          <head>
              <title>üîí Unified Security Scan Report</title>
              <meta charset="UTF-8">
              <style>
                  :root {
                      --critical: #d32f2f;
                      --high: #f57c00;
                      --medium: #fbc02d;
                      --low: #388e3c;
                      --passed: #4caf50;
                      --failed: #d32f2f;
                      --background: #f5f5f5;
                  }
                  * { box-sizing: border-box; margin: 0; padding: 0; }
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      line-height: 1.6; 
                      color: #333; 
                      background: var(--background);
                      padding: 20px;
                  }
                  .container { 
                      max-width: 1400px; 
                      margin: 0 auto; 
                      background: white; 
                      border-radius: 15px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                      overflow: hidden;
                  }
                  .header { 
                      background: linear-gradient(135deg, #2c3e50, #34495e);
                      color: white; 
                      padding: 40px; 
                      text-align: center;
                  }
                  .header h1 { 
                      font-size: 2.5em; 
                      margin-bottom: 10px;
                  }
                  .summary-grid { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                      gap: 20px; 
                      padding: 30px;
                      background: #f8f9fa;
                  }
                  .summary-card { 
                      padding: 25px; 
                      border-radius: 10px; 
                      text-align: center;
                      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                      transition: transform 0.3s ease;
                  }
                  .summary-card:hover { transform: translateY(-5px); }
                  .critical { background: linear-gradient(135deg, #ffebee, #ffcdd2); border-left: 5px solid var(--critical); }
                  .high { background: linear-gradient(135deg, #fff3e0, #ffe0b2); border-left: 5px solid var(--high); }
                  .passed { background: linear-gradient(135deg, #e8f5e8, #c8e6c9); border-left: 5px solid var(--passed); }
                  .failed { background: linear-gradient(135deg, #ffebee, #ffcdd2); border-left: 5px solid var(--failed); }
                  .scan-section { 
                      margin: 20px; 
                      padding: 20px;
                      border-radius: 10px;
                      background: #f8f9fa;
                      border-left: 4px solid #3498db;
                  }
                  .vuln-item { 
                      padding: 12px; 
                      margin: 8px 0; 
                      border-radius: 6px; 
                      background: white;
                      border-left: 4px solid;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                  }
                  .vuln-critical { border-left-color: var(--critical); }
                  .vuln-high { border-left-color: var(--high); }
                  .timestamp { opacity: 0.8; font-size: 0.9em; }
                  .status-badge { 
                      display: inline-block; 
                      padding: 5px 15px; 
                      border-radius: 20px; 
                      color: white; 
                      font-weight: bold; 
                      margin: 10px 0; 
                  }
                  .status-passed { background: var(--passed); }
                  .status-failed { background: var(--failed); }
                  .tool-icon { font-size: 1.2em; margin-right: 10px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üîí Unified Security Scan Report</h1>
                      <div class="timestamp">Generated on: $(date +"%Y-%m-%d %H:%M:%S")</div>
                      <div class="timestamp">Branch: ${{ github.ref_name }}</div>
                  </div>
                  
                  <div class="summary-grid">
          EOF
          
          # Summary Cards
          echo "<div class='summary-card critical'><h3>üö® Critical Vulnerabilities</h3><h1>$CRITICAL_COUNT</h1><p>Requires immediate attention</p></div>" >> $REPORT
          echo "<div class='summary-card high'><h3>‚ö†Ô∏è High Vulnerabilities</h3><h1>$HIGH_COUNT</h1><p>Should be addressed soon</p></div>" >> $REPORT
          
          if [ "$GATE_PASSED" = "true" ]; then
              echo "<div class='summary-card passed'><h3>‚úÖ Security Status</h3><h1>PASSED</h1><p>No critical vulnerabilities</p></div>" >> $REPORT
          else
              echo "<div class='summary-card failed'><h3>‚ùå Security Status</h3><h1>FAILED</h1><p>$CRITICAL_COUNT critical vulnerabilities found</p></div>" >> $REPORT
          fi
          
          cat >> $REPORT << 'EOF'
                  </div>
          EOF
          
          # Function to generate vulnerability details
          generate_vulnerability_section() {
              local file=$1
              local title=$2
              local icon=$3
              
              if [ ! -f "$file" ]; then
                  echo "<div class='scan-section'><h2><span class='tool-icon'>$icon</span> $title</h2><p>No report available</p></div>" >> $REPORT
                  return
              fi
              
              local critical_vulns=""
              local high_vulns=""
              
              # Parse vulnerabilities from SARIF
              while IFS= read -r result; do
                  if [ -n "$result" ]; then
                      local ruleId=$(echo "$result" | jq -r '.ruleId // "Unknown"' 2>/dev/null)
                      local message=$(echo "$result" | jq -r '.message.text // "No description"' 2>/dev/null | sed 's/</\&lt;/g; s/>/\&gt;/g')
                      local severity=$(echo "$result" | jq -r '
                          .properties.severity? // 
                          .level? // 
                          (.properties.tags[]? | select(. | test("CRITICAL|HIGH|MEDIUM|LOW"; "i"))) // 
                          "UNKNOWN"
                      ' 2>/dev/null | tr '[:lower:]' '[:upper:]')
                      
                      local html_output=""
                      case "$severity" in
                          "CRITICAL"|"ERROR")
                              html_output="<div class='vuln-item vuln-critical'><strong>üö® $ruleId</strong><br>$message</div>"
                              critical_vulns+="$html_output"
                              ;;
                          "HIGH"|"WARNING")
                              html_output="<div class='vuln-item vuln-high'><strong>‚ö†Ô∏è $ruleId</strong><br>$message</div>"
                              high_vulns+="$html_output"
                              ;;
                      esac
                  fi
              done < <(jq -c '.runs[0].results[]?' "$file" 2>/dev/null || echo "")
              
              # Count vulnerabilities
              local critical_count=$(echo "$critical_vulns" | grep -c "vuln-critical" || true)
              local high_count=$(echo "$high_vulns" | grep -c "vuln-high" || true)
              
              echo "<div class='scan-section'>" >> $REPORT
              echo "<h2><span class='tool-icon'>$icon</span> $title</h2>" >> $REPORT
              echo "<p><strong>Critical:</strong> $critical_count | <strong>High:</strong> $high_count</p>" >> $REPORT
              
              if [ -n "$critical_vulns" ]; then
                  echo "<h4>üö® Critical Vulnerabilities:</h4>" >> $REPORT
                  echo "$critical_vulns" >> $REPORT
              fi
              
              if [ -n "$high_vulns" ]; then
                  echo "<h4>‚ö†Ô∏è High Vulnerabilities:</h4>" >> $REPORT
                  echo "$high_vulns" >> $REPORT
              fi
              
              if [ -z "$critical_vulns" ] && [ -z "$high_vulns" ]; then
                  echo "<p>‚úÖ No critical or high vulnerabilities found</p>" >> $REPORT
              fi
              
              echo "</div>" >> $REPORT
          }
          
          # Generate sections for each scan type
          generate_vulnerability_section "reports/trivy-deps-report.sarif" "SCA - Software Composition Analysis" "üì¶"
          generate_vulnerability_section "reports/trivy-container-report.sarif" "Container Security Scan" "üê≥"
          generate_vulnerability_section "reports/iac/checkov-results.sarif" "IaC Security Scan" "üîß"
          
          # Add recommendations if critical vulnerabilities found
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
              cat >> $REPORT << 'EOF'
                  <div class='scan-section' style='border-left-color: var(--critical);'>
                      <h2>üö® Security Recommendations</h2>
                      <div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px;'>
                          <div class='vuln-item'>
                              <h3>Immediate Actions Required:</h3>
                              <ul>
                                  <li>Update vulnerable dependencies in pom.xml</li>
                                  <li>Use latest base image in Dockerfile</li>
                                  <li>Apply security patches immediately</li>
                                  <li>Review critical vulnerabilities list above</li>
                              </ul>
                          </div>
                          <div class='vuln-item'>
                              <h3>Long-term Strategies:</h3>
                              <ul>
                                  <li>Implement automated dependency updates</li>
                                  <li>Regular security scanning in CI/CD</li>
                                  <li>Use dependency vulnerability monitoring</li>
                                  <li>Security training for developers</li>
                              </ul>
                          </div>
                      </div>
                  </div>
          EOF
          fi
          
          cat >> $REPORT << 'EOF'
              </div>
          </body>
          </html>
          EOF
          
          echo "üìä Generated comprehensive security report"
          echo "   üö® Critical: $CRITICAL_COUNT"
          echo "   ‚ö†Ô∏è High: $HIGH_COUNT"
          echo "   ‚úÖ Gate Status: $GATE_PASSED"

      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html

  notify:
    name: üì¢ Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, report]
    if: always()
    steps:
      - name: ‚úÖ Notify Success
        if: ${{ success() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ‚úÖ **Pipeline SUCCESS** cho ${{ github.repository }}
            üîÄ Branch: ${{ github.ref_name }}
            üìå Status: **SUCCESS**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
      - name: ‚ùå Notify Failure
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ‚ùå **Pipeline FAILED** cho ${{ github.repository }}
            üîÄ Branch: ${{ github.ref_name }}
            üìå Status: **FAILED**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
            üö® H√£y ki·ªÉm tra l·∫°i logs chi ti·∫øt trong GitHub Action
