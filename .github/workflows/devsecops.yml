name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - run: ./mvnw -B clean test
      - run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check - Cached, No NVD)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Cache OWASP Dependency-Check data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-
      - name: Run Dependency Check (cached, no NVD)
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -Dformat=ALL \
            -Dnvd.api.enabled=false \
            -Dnvd.failOnError=false \
            -Ddependency-check.skipTestScope=true
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.*

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-report.sarif
          severity: CRITICAL,HIGH
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - name: Enforce Security Gate
        run: |
          echo "üîí Running Security Gate..."
          FAIL=0
          if [ -f reports/sca/dependency-check-report.json ]; then
            CRIT=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Critical")] | length' reports/sca/dependency-check-report.json)
            HIGH=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="High")] | length' reports/sca/dependency-check-report.json)
            if [ "$CRIT" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "‚ùå SCA found Critical/High vulnerabilities"
              FAIL=1
            fi
          fi
          if [ -f reports/container/trivy-report.sarif ]; then
            CRIT=$(jq '[.runs[].results[] | select(.ruleId | test("CRITICAL"))] | length' reports/container/trivy-report.sarif)
            HIGH=$(jq '[.runs[].results[] | select(.ruleId | test("HIGH"))] | length' reports/container/trivy-report.sarif)
            if [ "$CRIT" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "‚ùå Container scan found Critical/High vulnerabilities"
              FAIL=1
            fi
          fi
          if [ "$FAIL" -eq 1 ]; then
            echo "‚ùå Security Gate failed"
            exit 1
          else
            echo "‚úÖ Security Gate passed"
          fi

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [security-gate]
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set Env
        id: set-url
        run: |
          if [ "${GITHUB_REF_NAME}" = "test" ]; then
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_TEST }}" >> $GITHUB_ENV
            echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_PROD }}" >> $GITHUB_ENV
            echo "url=https://student-management-prod.onrender.com" >> $GITHUB_OUTPUT
          fi
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${service_id}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
      - name: Post-deploy health check
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          echo "‚è≥ Waiting for app to be ready..."
          for i in {1..10}; do
            if curl -fs $TARGET/actuator/health; then
              echo "‚úÖ App is healthy!"
              exit 0
            fi
            echo "‚ö†Ô∏è App not ready yet. Retrying in 15s..."
            sleep 15
          done
          echo "‚ùå Health check failed after retries"
          exit 1

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline
        env:
          URL: ${{ needs.deploy.outputs.url }}
        run: |
          mkdir -p zap-output
          echo "‚è≥ Running ZAP scan on $URL ..."
          docker run --rm \
            --user root \
            -v "$(pwd)/zap-output:/zap/wrk:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t $URL \
            -a -m 5 \
            -r /zap/wrk/zap-report.html \
            -w /zap/wrk/zap-report.md \
            -J /zap/wrk/zap-report.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-output/*

  report:
    name: üìä Unified Security Report (HTML)
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, dast]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - uses: actions/download-artifact@v4
        with:
          name: zap-report
          path: reports/dast
      - name: Generate Unified HTML Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html

          echo "<html><head><meta charset='UTF-8'><title>Unified Security Report</title>" > $REPORT
          echo "<style>body{font-family:Arial;} table{border-collapse:collapse;width:100%;margin:15px 0;} th,td{border:1px solid #ddd;padding:8px;} th{background:#333;color:#fff;} tr:nth-child(even){background:#f2f2f2;} h2{margin-top:30px;color:#333;}</style>" >> $REPORT
          echo "</head><body>" >> $REPORT
          echo "<h1>üîí Unified Security Report</h1>" >> $REPORT
          echo "<p>‚úÖ Generated on $(date)</p>" >> $REPORT

          ######## Summary ########
          echo "<h2>üìä Summary (High & Critical)</h2><table><tr><th>Tool</th><th>High</th><th>Critical</th></tr>" >> $REPORT

          if [ -f reports/sca/dependency-check-report.json ]; then
            SCA_HIGH=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="High")] | length' reports/sca/dependency-check-report.json)
            SCA_CRIT=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Critical")] | length' reports/sca/dependency-check-report.json)
            echo "<tr><td>SCA (Dependency-Check)</td><td>$SCA_HIGH</td><td>$SCA_CRIT</td></tr>" >> $REPORT
          fi

          if [ -f reports/container/trivy-report.sarif ]; then
            T_HIGH=$(jq '[.runs[].results[] | select(.ruleId | test("HIGH"))] | length' reports/container/trivy-report.sarif)
            T_CRIT=$(jq '[.runs[].results[] | select(.ruleId | test("CRITICAL"))] | length' reports/container/trivy-report.sarif)
            echo "<tr><td>Container (Trivy)</td><td>$T_HIGH</td><td>$T_CRIT</td></tr>" >> $REPORT
          fi

          if [ -f reports/iac/checkov-results.sarif ]; then
            C_HIGH=$(jq '[.runs[].results[] | select(.level=="warning")] | length' reports/iac/checkov-results.sarif)
            C_CRIT=$(jq '[.runs[].results[] | select(.level=="error")] | length' reports/iac/checkov-results.sarif)
            echo "<tr><td>IaC (Checkov)</td><td>$C_HIGH</td><td>$C_CRIT</td></tr>" >> $REPORT
          fi

          if [ -f reports/dast/zap-report.json ]; then
            Z_HIGH=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' reports/dast/zap-report.json)
            Z_CRIT=$(jq '[.site[].alerts[] | select(.riskcode=="4")] | length' reports/dast/zap-report.json)
            echo "<tr><td>DAST (ZAP)</td><td>$Z_HIGH</td><td>$Z_CRIT</td></tr>" >> $REPORT
          fi

          echo "</table>" >> $REPORT

          ######## Details ########
          if [ -f reports/sca/dependency-check-report.json ]; then
            echo "<h2>üì¶ SCA (Dependency Check)</h2><table><tr><th>Library</th><th>CVE</th><th>Severity</th></tr>" >> $REPORT
            jq -r '.dependencies[]? | select(.vulnerabilities!=null) | .fileName as $lib | .vulnerabilities[] | select(.severity=="High" or .severity=="Critical") | "<tr><td>"+$lib+"</td><td>"+.name+"</td><td>"+.severity+"</td></tr>"' reports/sca/dependency-check-report.json >> $REPORT
            echo "</table>" >> $REPORT
          fi

          if [ -f reports/container/trivy-report.sarif ]; then
            echo "<h2>üê≥ Container Scan (Trivy)</h2><table><tr><th>ID</th><th>Message</th><th>Severity</th></tr>" >> $REPORT
            jq -r '.runs[].results[] | select(.ruleId | test("CRITICAL|HIGH")) | "<tr><td>"+.ruleId+"</td><td>"+.message.text+"</td><td>"+(.ruleId|capture("(?<sev>CRITICAL|HIGH)").sev)+"</td></tr>"' reports/container/trivy-report.sarif >> $REPORT
            echo "</table>" >> $REPORT
          fi

          if [ -f reports/iac/checkov-results.sarif ]; then
            echo "<h2>‚òÅÔ∏è IaC Scan (Checkov)</h2><table><tr><th>ID</th><th>Resource</th><th>Severity</th></tr>" >> $REPORT
            jq -r '.runs[].results[] | select(.level=="error" or .level=="warning") | "<tr><td>"+.ruleId+"</td><td>"+(.locations[0].physicalLocation.artifactLocation.uri)+"</td><td>"+.level+"</td></tr>"' reports/iac/checkov-results.sarif >> $REPORT
            echo "</table>" >> $REPORT
          fi

          if [ -f reports/dast/zap-report.json ]; then
            echo "<h2>üåê DAST (OWASP ZAP)</h2><table><tr><th>Alert</th><th>Risk</th><th>URL</th></tr>" >> $REPORT
            jq -r '.site[].alerts[] | select(.riskcode=="3" or .riskcode=="4") | "<tr><td>"+.alert+"</td><td>"+.riskdesc+"</td><td>"+(.instances[0].uri // "-")+"</td></tr>"' reports/dast/zap-report.json >> $REPORT
            echo "</table>" >> $REPORT
          fi

          echo "</body></html>" >> $REPORT
      - uses: actions/upload-artifact@v4
        with:
          name: unified-security-report
          path: reports/final/security-report.html

  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [report]
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${GITHUB_REF_NAME}"
          REPO="${{ github.repository }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          ARTIFACT_URL="${RUN_URL}#artifacts"

          if [ "$STATUS" = "success" ]; then
            EMOJI="‚úÖ"
            MSG="Pipeline succeeded"
          else
            EMOJI="‚ùå"
            MSG="Pipeline failed"
          fi

          payload="{
            \"content\": \"${EMOJI} ${MSG} for **${REPO}** on branch \`${BRANCH}\`\\nüîó Run: ${RUN_URL}\\nüìä [Security Report](${ARTIFACT_URL})\"
          }"
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"
