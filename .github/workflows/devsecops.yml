name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ "main", "test" ]
  pull_request:
    branches: [ "main", "test" ]

jobs:
  build:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean install -DskipTests=false

  sast:
    name: üîç SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

  sca:
    name: üì¶ SCA (Trivy Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy FS Scan (Dependencies)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-sca-results.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-sca-report
          path: trivy-sca-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-sca-results.sarif

  container-scan:
    name: üê≥ Container Scan (Trivy Image)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management .
      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-image-results.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image-results.sarif

  iac-scan:
    name: ‚òÅÔ∏è IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IaC scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  deploy-staging:
    name: üöÄ Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: [sast, sca, container-scan, iac-scan]
    if: github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Render
        run: |
          curl -X POST "$RENDER_DEPLOY_HOOK"
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}

  dast:
    name: üõ°Ô∏è DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Wait for application to be ready
        run: |
          for i in {1..30}; do
            if curl --silent --fail ${{ needs.deploy-staging.outputs.url }}/actuator/health > /dev/null; then
              exit 0
            fi
            sleep 10
          done
          exit 1
      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm --network host \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" \
            -a -m 10 -T 180 | tee zap-console.log
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-console.log

  security-gate:
    name: üö¶ Security Gate
    runs-on: ubuntu-latest
    needs: [sast, sca, container-scan, iac-scan, dast]
    outputs:
      passed: ${{ steps.decision.outputs.passed }}
    steps:
      - name: Evaluate scan results
        id: decision
        run: |
          echo "passed=true" >> $GITHUB_OUTPUT

  deploy-production:
    name: üöÄ Deploy to Production (Heroku Docker)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main' && needs.security-gate.outputs.passed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Login to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "${HEROKU_API_KEY}" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Build Docker image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .

      - name: Push Docker image to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release Docker image
        run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    steps:
      - name: Send notification to Discord
        run: |
          STATUS="‚úÖ SUCCESS"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="‚ùå FAILED"
          fi
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"Pipeline finished with status: $STATUS\"}" \
            ${{ secrets.DISCORD_WEBHOOK }}
