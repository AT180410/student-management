name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - run: ./mvnw -B clean test
      - run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check - Cached, No NVD)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
  
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
  
      - run: chmod +x ./mvnw
  
      - name: Cache OWASP Dependency-Check data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-
  
      - name: Run Dependency Check (cached, no NVD)
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -Dformat=ALL \
            -Dnvd.api.enabled=false \
            -Dnvd.failOnError=false \
            -Ddependency-check.skipTestScope=true
  
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.*

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-report.sarif
          severity: CRITICAL,HIGH
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set Env
        id: set-url
        run: |
          if [ "${GITHUB_REF_NAME}" = "test" ]; then
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_TEST }}" >> $GITHUB_ENV
            echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_PROD }}" >> $GITHUB_ENV
            echo "url=https://student-management-prod.onrender.com" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${service_id}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"

      - name: Post-deploy health check
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          echo "⏳ Waiting for app to be ready..."
          for i in {1..10}; do
            if curl -fs $TARGET/actuator/health; then
              echo "✅ App is healthy!"
              exit 0
            fi
            echo "⚠️ App not ready yet. Retrying in 15s..."
            sleep 15
          done
          echo "❌ Health check failed after retries"
          exit 1

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP ZAP Baseline
        env:
          URL: ${{ needs.deploy.outputs.url }}
        run: |
          mkdir -p zap-output
          echo "⏳ Running ZAP scan on $URL ..."
          docker run --rm \
            --user root \
            -v "$(pwd)/zap-output:/zap/wrk:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t $URL \
            -a -m 5 \
            -r /zap/wrk/zap-report.html \
            -w /zap/wrk/zap-report.md \
            -J /zap/wrk/zap-report.json || true

          echo "📂 Files in zap-output after scan:"
          ls -l zap-output

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-output/*
  report:
    name: 📊 Unified Security Report
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, dast]
    steps:
      - uses: actions/checkout@v4
  
      # ⬇️ Download all reports
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - uses: actions/download-artifact@v4
        with:
          name: zap-report
          path: reports/dast
  
      # 🔄 Parse reports & generate summary table
      - name: Generate Unified Report
          run: |
            mkdir -p reports/final
            echo "# 🔒 Unified Security Report" > reports/final/security-report.md
            echo "" >> reports/final/security-report.md
        
            # 📊 Summary
            echo "## 📊 Summary" >> reports/final/security-report.md
            echo "| Tool | Critical | High | Medium | Low |" >> reports/final/security-report.md
            echo "|------|----------|------|--------|-----|" >> reports/final/security-report.md
        
            #######################
            # 1. SCA (Dependency Check)
            #######################
            if [ -f reports/sca/dependency-check-report.json ]; then
              CRIT=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Critical")] | length' reports/sca/dependency-check-report.json)
              HIGH=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="High")] | length' reports/sca/dependency-check-report.json)
              MED=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Medium")] | length' reports/sca/dependency-check-report.json)
              LOW=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Low")] | length' reports/sca/dependency-check-report.json)
              echo "| SCA (Dependency Check) | $CRIT | $HIGH | $MED | $LOW |" >> reports/final/security-report.md
        
              echo "" >> reports/final/security-report.md
              echo "### 🔍 SCA Findings" >> reports/final/security-report.md
              echo "| Severity | CVE | Package/File | Description |" >> reports/final/security-report.md
              echo "|----------|-----|--------------|-------------|" >> reports/final/security-report.md
              jq -r '.dependencies[] | select(.vulnerabilities) |
                .fileName as $f |
                .vulnerabilities[] |
                "| \(.severity) | \(.name) | \($f) | \(.description)"' reports/sca/dependency-check-report.json \
                >> reports/final/security-report.md
            fi
        
            #######################
            # 2. Container (Trivy)
            #######################
            if [ -f reports/container/trivy-report.sarif ]; then
              CRIT=$(jq '[.runs[].results[] | select(.ruleId | test("CRITICAL"))] | length' reports/container/trivy-report.sarif)
              HIGH=$(jq '[.runs[].results[] | select(.ruleId | test("HIGH"))] | length' reports/container/trivy-report.sarif)
              MED=$(jq '[.runs[].results[] | select(.level=="warning")] | length' reports/container/trivy-report.sarif)
              LOW=$(jq '[.runs[].results[] | select(.level=="note")] | length' reports/container/trivy-report.sarif)
              echo "| Container (Trivy) | $CRIT | $HIGH | $MED | $LOW |" >> reports/final/security-report.md
        
              echo "" >> reports/final/security-report.md
              echo "### 🐳 Trivy Findings" >> reports/final/security-report.md
              echo "| Severity | Rule ID | Message |" >> reports/final/security-report.md
              echo "|----------|---------|---------|" >> reports/final/security-report.md
              jq -r '.runs[].results[] |
                "| \(.level) | \(.ruleId) | \(.message.text)"' reports/container/trivy-report.sarif \
                >> reports/final/security-report.md
            fi
        
            #######################
            # 3. IaC (Checkov)
            #######################
            if [ -f reports/iac/checkov-results.sarif ]; then
              HIGH=$(jq '[.runs[].results[] | select(.level=="error")] | length' reports/iac/checkov-results.sarif)
              MED=$(jq '[.runs[].results[] | select(.level=="warning")] | length' reports/iac/checkov-results.sarif)
              LOW=$(jq '[.runs[].results[] | select(.level=="note")] | length' reports/iac/checkov-results.sarif)
              echo "| IaC (Checkov) | - | $HIGH | $MED | $LOW |" >> reports/final/security-report.md
        
              echo "" >> reports/final/security-report.md
              echo "### 🏗️ Checkov Findings" >> reports/final/security-report.md
              echo "| Severity | Rule ID | Message |" >> reports/final/security-report.md
              echo "|----------|---------|---------|" >> reports/final/security-report.md
              jq -r '.runs[].results[] |
                "| \(.level) | \(.ruleId) | \(.message.text)"' reports/iac/checkov-results.sarif \
                >> reports/final/security-report.md
            fi
        
            #######################
            # 4. DAST (ZAP)
            #######################
            if [ -f reports/dast/zap-report.json ]; then
              HIGH=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' reports/dast/zap-report.json)
              MED=$(jq '[.site[].alerts[] | select(.riskcode=="2")] | length' reports/dast/zap-report.json)
              LOW=$(jq '[.site[].alerts[] | select(.riskcode=="1")] | length' reports/dast/zap-report.json)
              echo "| DAST (OWASP ZAP) | - | $HIGH | $MED | $LOW |" >> reports/final/security-report.md
        
              echo "" >> reports/final/security-report.md
              echo "### 🌐 ZAP Findings" >> reports/final/security-report.md
              echo "| Risk | Alert | URL | Description |" >> reports/final/security-report.md
              echo "|------|-------|-----|-------------|" >> reports/final/security-report.md
              jq -r '.site[].alerts[] |
                . as $a |
                ($a.instances[0].uri // "-") as $u |
                "| \($a.riskdesc) | \($a.alert) | \($u) | \($a.desc)"' reports/dast/zap-report.json \
                >> reports/final/security-report.md
            fi
        
            echo "" >> reports/final/security-report.md
            echo "✅ Generated on $(date)" >> reports/final/security-report.md


  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy, dast]
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${GITHUB_REF_NAME}"
          REPO="${{ github.repository }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          payload="{
            \"content\": \"🚀 Pipeline finished with status: **${STATUS}** for **${REPO}** on branch \`${BRANCH}\`\\n🔗 Run: ${RUN_URL}\\n📊 Sonar: https://sonarcloud.io/dashboard?id=CTD03_student-management\"
          }"
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"
