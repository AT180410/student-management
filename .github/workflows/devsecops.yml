name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Trivy for Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Build with Maven to generate dependencies
        run: ./mvnw -B compile dependency:tree
      - name: Run Trivy vulnerability scanner for dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-deps-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-container-report.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: trivy-container-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IoC scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  # üîí OPTIMIZED SECURITY GATE - UNIFIED APPROACH
  security-gate:
    name: üîí Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
      critical_count: ${{ steps.check-gate.outputs.critical_count }}
      high_count: ${{ steps.check-gate.outputs.high_count }}
    steps:
      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq
  
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
  
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
  
      - name: Unified SARIF Analysis
        id: check-gate
        run: |
          set -e
          echo "üîí Starting Unified SARIF Analysis..."
          
          # Initialize counters
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          ALL_VULNERABILITIES=""
          
          # Function to parse SARIF and extract severity
          parse_sarif() {
            local sarif_file=$1
            local tool_name=$2
            
            if [ ! -f "$sarif_file" ]; then
              echo "‚ö†Ô∏è No $tool_name report found: $sarif_file"
              return
            fi
            
            echo "üìä Analyzing $tool_name report..."
            
            # Parse using jq and process line by line
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                local ruleId=$(echo "$line" | jq -r '.ruleId // empty')
                local severity=$(echo "$line" | jq -r '
                  # Try multiple severity fields
                  .level // 
                  .properties.severity // 
                  .properties."security-severity" // 
                  ( .properties.tags[]? | select(. | test("CRITICAL|HIGH|MEDIUM|LOW"; "i")) ) //
                  "UNKNOWN"
                ' 2>/dev/null || echo "UNKNOWN")
                
                # Convert to numeric score for consistent evaluation
                local score=0
                case $(echo "$severity" | tr '[:lower:]' '[:upper:]') in
                  "CRITICAL"|"ERROR") score=9.5 ;;
                  "HIGH"|"WARNING") score=7.5 ;;
                  "MEDIUM") score=5.0 ;;
                  "LOW"|"NOTE") score=3.0 ;;
                  *) 
                    # If it's a number, use it directly
                    if [[ "$severity" =~ ^[0-9.]+$ ]]; then
                      score="$severity"
                    else
                      score=0
                    fi
                    ;;
                esac
                
                # Count based on CVSS scores
                if (( $(echo "$score >= 9.0" | bc -l 2>/dev/null || echo 0) )); then
                  TOTAL_CRITICAL=$((TOTAL_CRITICAL + 1))
                  ALL_VULNERABILITIES+="üö® CRITICAL ($tool_name): $ruleId (Score: $score)"$'\n'
                elif (( $(echo "$score >= 7.0" | bc -l 2>/dev/null || echo 0) )); then
                  TOTAL_HIGH=$((TOTAL_HIGH + 1))
                  ALL_VULNERABILITIES+="‚ö†Ô∏è HIGH ($tool_name): $ruleId (Score: $score)"$'\n'
                fi
              fi
            done < <(jq -c '.runs[0].results[]?' "$sarif_file" 2>/dev/null || echo "")
          }
          
          # Install bc for floating point comparison
          sudo apt-get install -y bc
          
          # Analyze all SARIF files
          parse_sarif "reports/trivy-deps-report.sarif" "SCA"
          parse_sarif "reports/trivy-container-report.sarif" "Container"
          parse_sarif "reports/iac/checkov-results.sarif" "IaC"
          
          echo "üìä FINAL SECURITY SUMMARY:"
          echo "========================================"
          echo "üö® CRITICAL Vulnerabilities (CVSS ‚â• 9.0): $TOTAL_CRITICAL"
          echo "‚ö†Ô∏è HIGH Vulnerabilities (CVSS 7.0-8.9): $TOTAL_HIGH"
          echo "========================================"
          
          if [ -n "$ALL_VULNERABILITIES" ]; then
            echo "üîç DETAILED FINDINGS:"
            echo "$ALL_VULNERABILITIES"
          else
            echo "‚úÖ No critical or high vulnerabilities found"
          fi
          
          # Set outputs
          echo "passed=$([ $TOTAL_CRITICAL -eq 0 ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "critical_count=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high_count=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          
          if [ $TOTAL_CRITICAL -gt 0 ]; then
            echo "‚ùå Security Gate FAILED - $TOTAL_CRITICAL critical vulnerabilities found"
            exit 1
          else
            echo "‚úÖ Security Gate PASSED"
          fi
            
  deploy-staging:
    name: üöÄ Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/test' && needs.security-gate.outputs.passed == 'true'
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          curl --silent --show-error --fail -X POST \
            "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
      - name: Wait for deployment to be ready
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          for i in {1..20}; do
            if curl --silent --fail "$TARGET/actuator/health" > /dev/null; then
              exit 0
            fi
            sleep 10
          done
          exit 1
  dast:
    name: üõ°Ô∏è DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Wait for application to be ready
        run: |
          for i in {1..30}; do
            if curl -s -f ${{ needs.deploy-staging.outputs.url }}/actuator/health > /dev/null; then
              exit 0
            fi
            sleep 10
          done
          exit 1
      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" \
            -a -m 10 -T 180 | tee zap-console.log
          grep -E "ALERT|FAIL" zap-console.log || true
  dynamic-security-gate:
    name: üîí Dynamic Security Gate (DAST)
    runs-on: ubuntu-latest
    needs: dast
    if: github.ref == 'refs/heads/test' && always()
    outputs:
      passed: ${{ steps.dast-check.outputs.passed }}
    steps:
      - name: Check DAST Results
        id: dast-check
        run: |
          echo "‚úÖ DAST completed (always pass for now)"
          echo "passed=true" >> $GITHUB_OUTPUT
  deploy-production:
    name: üöÄ Deploy to Production (Heroku Docker)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main' && needs.security-gate.outputs.passed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Login to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo "${HEROKU_API_KEY}" | docker login --username=_ --password-stdin registry.heroku.com
      - name: Build Docker image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .
      - name: Push Docker image to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
      - name: Release Docker image
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          curl --silent --show-error --fail -X POST \
            "https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/releases" \
            -d '{"slug":null,"description":"Deploy via GitHub Actions"}' \
            -H "Content-Type:application/json" \
            -H "Accept: application/vnd.heroku+json; version=3" \
            -H "Authorization: Bearer ${HEROKU_API_KEY}"
 # üìä UNIFIED SECURITY REPORT
  report:
    name: üìä Unified Security Report
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, security-gate]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
  
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
  
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
  
      - name: Generate Comprehensive HTML Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html
          
          # Get security gate results
          CRITICAL_COUNT="${{ needs.security-gate.outputs.critical_count }}"
          HIGH_COUNT="${{ needs.security-gate.outputs.high_count }}"
          GATE_PASSED="${{ needs.security-gate.outputs.passed }}"
          
          cat > $REPORT << 'EOF'
          <html>
          <head>
              <title>üîí Unified Security Scan Report</title>
              <meta charset="UTF-8">
              <style>
                  :root {
                      --critical: #d32f2f;
                      --high: #f57c00;
                      --medium: #fbc02d;
                      --low: #388e3c;
                      --passed: #4caf50;
                      --failed: #d32f2f;
                  }
                  * { box-sizing: border-box; margin: 0; padding: 0; }
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      line-height: 1.6; 
                      color: #333; 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container { 
                      max-width: 1400px; 
                      margin: 0 auto; 
                      background: white; 
                      border-radius: 15px;
                      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                      overflow: hidden;
                  }
                  .header { 
                      background: linear-gradient(135deg, #2c3e50, #34495e);
                      color: white; 
                      padding: 40px; 
                      text-align: center;
                      position: relative;
                  }
                  .header h1 { 
                      font-size: 2.5em; 
                      margin-bottom: 10px;
                      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                  }
                  .summary-grid { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                      gap: 20px; 
                      padding: 30px;
                      background: #f8f9fa;
                  }
                  .summary-card { 
                      padding: 25px; 
                      border-radius: 10px; 
                      text-align: center;
                      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                      transition: transform 0.3s ease;
                  }
                  .summary-card:hover { transform: translateY(-5px); }
                  .critical { background: linear-gradient(135deg, #ffebee, #ffcdd2); border-left: 5px solid var(--critical); }
                  .high { background: linear-gradient(135deg, #fff3e0, #ffe0b2); border-left: 5px solid var(--high); }
                  .passed { background: linear-gradient(135deg, #e8f5e8, #c8e6c9); border-left: 5px solid var(--passed); }
                  .failed { background: linear-gradient(135deg, #ffebee, #ffcdd2); border-left: 5px solid var(--failed); }
                  .scan-section { 
                      margin: 30px; 
                      padding: 25px;
                      border-radius: 10px;
                      background: #f8f9fa;
                      border-left: 5px solid #3498db;
                  }
                  .vuln-grid { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
                      gap: 15px; 
                      margin-top: 15px;
                  }
                  .vuln-item { 
                      padding: 15px; 
                      border-radius: 8px; 
                      background: white;
                      border-left: 4px solid;
                      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                  }
                  .vuln-critical { border-left-color: var(--critical); }
                  .vuln-high { border-left-color: var(--high); }
                  .timestamp { 
                      opacity: 0.8; 
                      font-size: 0.9em;
                      margin-top: 10px;
                  }
                  .status-badge {
                      display: inline-block;
                      padding: 5px 15px;
                      border-radius: 20px;
                      color: white;
                      font-weight: bold;
                      margin: 10px 0;
                  }
                  .status-passed { background: var(--passed); }
                  .status-failed { background: var(--failed); }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üîí Unified Security Scan Report</h1>
                      <div class="timestamp">Generated on: $(date +"%Y-%m-%d %H:%M:%S")</div>
                  </div>
                  
                  <div class="summary-grid">
          EOF
          
          # Summary Cards
          echo "<div class='summary-card critical'><h3>üö® Critical Vulnerabilities</h3><h1>$CRITICAL_COUNT</h1><p>CVSS ‚â• 9.0</p></div>" >> $REPORT
          echo "<div class='summary-card high'><h3>‚ö†Ô∏è High Vulnerabilities</h3><h1>$HIGH_COUNT</h1><p>CVSS 7.0-8.9</p></div>" >> $REPORT
          
          if [ "$GATE_PASSED" = "true" ]; then
              echo "<div class='summary-card passed'><h3>‚úÖ Security Status</h3><h1>PASSED</h1><p>No critical vulnerabilities</p></div>" >> $REPORT
          else
              echo "<div class='summary-card failed'><h3>‚ùå Security Status</h3><h1>FAILED</h1><p>$CRITICAL_COUNT critical vulnerabilities found</p></div>" >> $REPORT
          fi
          
          cat >> $REPORT << 'EOF'
                  </div>
          EOF
          
          # Function to generate scan section
          generate_scan_section() {
              local file=$1
              local title=$2
              local icon=$3
              
              if [ ! -f "$file" ]; then
                  echo "<div class='scan-section'><h2>$icon $title</h2><p>No report available</p></div>" >> $REPORT
                  return
              fi
              
              local critical_count=0
              local high_count=0
              local vuln_details=""
              
              while IFS= read -r line; do
                  if [ -n "$line" ]; then
                      local ruleId=$(echo "$line" | jq -r '.ruleId // "Unknown"' 2>/dev/null)
                      local message=$(echo "$line" | jq -r '.message.text // "No description"' 2>/dev/null | sed 's/"/\\"/g')
                      local severity=$(echo "$line" | jq -r '.level // .properties.severity // "UNKNOWN"' 2>/dev/null)
                      
                      local score=0
                      case $(echo "$severity" | tr '[:lower:]' '[:upper:]') in
                          "CRITICAL"|"ERROR") score=9.5 ;;
                          "HIGH"|"WARNING") score=7.5 ;;
                          "MEDIUM") score=5.0 ;;
                          "LOW"|"NOTE") score=3.0 ;;
                          *) score=0 ;;
                      esac
                      
                      if (( $(echo "$score >= 9.0" | bc -l 2>/dev/null || echo 0) )); then
                          critical_count=$((critical_count + 1))
                          vuln_details+="<div class='vuln-item vuln-critical'><strong>üö® $ruleId</strong><br>$message<br><small>Score: $score</small></div>"
                      elif (( $(echo "$score >= 7.0" | bc -l 2>/dev/null || echo 0) )); then
                          high_count=$((high_count + 1))
                          vuln_details+="<div class='vuln-item vuln-high'><strong>‚ö†Ô∏è $ruleId</strong><br>$message<br><small>Score: $score</small></div>"
                      fi
                  fi
              done < <(jq -c '.runs[0].results[]?' "$file" 2>/dev/null || echo "")
              
              echo "<div class='scan-section'>" >> $REPORT
              echo "<h2>$icon $title</h2>" >> $REPORT
              echo "<p><strong>Critical:</strong> $critical_count | <strong>High:</strong> $high_count</p>" >> $REPORT
              if [ -n "$vuln_details" ]; then
                  echo "<div class='vuln-grid'>$vuln_details</div>" >> $REPORT
              else
                  echo "<p>‚úÖ No critical or high vulnerabilities found</p>" >> $REPORT
              fi
              echo "</div>" >> $REPORT
          }
          
          # Generate sections for each scan type
          generate_scan_section "reports/trivy-deps-report.sarif" "SCA - Software Composition Analysis" "üì¶"
          generate_scan_section "reports/trivy-container-report.sarif" "Container Security Scan" "üê≥"
          generate_scan_section "reports/iac/checkov-results.sarif" "IaC Security Scan" "üîß"
          
          # DAST Section
          echo "<div class='scan-section'>" >> $REPORT
          echo "<h2>üõ°Ô∏è DAST - Dynamic Application Security Testing</h2>" >> $REPORT
          if [ "${{ github.ref }}" == "refs/heads/test" ]; then
              if [ "${{ needs.dast.result }}" == "success" ]; then
                  echo "<p>‚úÖ DAST completed successfully</p>" >> $REPORT
                  echo "<p><strong>Target:</strong> ${{ needs.deploy-staging.outputs.url }}</p>" >> $REPORT
              else
                  echo "<p>‚ö†Ô∏è DAST status: ${{ needs.dast.result }}</p>" >> $REPORT
              fi
          else
              echo "<p>‚ÑπÔ∏è DAST only executes on test branch</p>" >> $REPORT
          fi
          echo "</div>" >> $REPORT
          
          # Recommendations Section
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
              cat >> $REPORT << 'EOF'
                  <div class='scan-section' style='border-left-color: var(--critical);'>
                      <h2>üö® Security Recommendations</h2>
                      <div class='vuln-grid'>
                          <div class='vuln-item'>
                              <h3>Immediate Actions Required:</h3>
                              <ul>
                                  <li>Address all critical vulnerabilities before deployment</li>
                                  <li>Update vulnerable dependencies</li>
                                  <li>Patch container base images</li>
                                  <li>Review IaC configurations</li>
                              </ul>
                          </div>
                      </div>
                  </div>
          EOF
          fi
          
          cat >> $REPORT << 'EOF'
              </div>
          </body>
          </html>
          EOF
          
          echo "üìä Generated comprehensive security report"
          echo "   üö® Critical: $CRITICAL_COUNT"
          echo "   ‚ö†Ô∏è High: $HIGH_COUNT"
          echo "   ‚úÖ Gate Status: $GATE_PASSED"
  
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html
  
      - name: Upload HTML report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-html-report
          path: reports/final/security-report.html

  notify:
    name: üì¢ Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, report, dynamic-security-gate]
    if: always()
    steps:
      - name: ‚úÖ Notify Success
        if: ${{ success() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ‚úÖ **Pipeline SUCCESS** cho `${{ github.repository }}`
            üîÄ Branch: `${{ github.ref_name }}`
            üìå Status: **SUCCESS**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result || 'N/A' }}
      - name: ‚ùå Notify Failure
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ‚ùå **Pipeline FAILED** cho `${{ github.repository }}`
            üîÄ Branch: `${{ github.ref_name }}`
            üìå Status: **FAILED**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result || 'N/A' }}
