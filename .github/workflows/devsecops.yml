name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - run: ./mvnw -B clean test
      - run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check - Cached, No NVD)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Cache OWASP Dependency-Check data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-
      - name: Run Dependency Check
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -Dformat=ALL \
            -Dnvd.api.enabled=false \
            -Dnvd.failOnError=false \
            -Ddependency-check.skipTestScope=true
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.*

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: json
          output_file_path: ./checkov-report.json
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-report.json

  # 🔐 Security Gate trước khi deploy
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [sca, container-scan, iac-scan]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac

      - name: Check Security Thresholds
        run: |
          echo "🔍 Checking vulnerabilities..."
          CRIT_SCA=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Critical")] | length' reports/sca/dependency-check-report.json)
          CRIT_TRIVY=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' reports/container/trivy-report.json)
          HIGH_TRIVY=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' reports/container/trivy-report.json)

          echo "Critical SCA: $CRIT_SCA"
          echo "Critical Container: $CRIT_TRIVY"
          echo "High Container: $HIGH_TRIVY"

          if [ "$CRIT_SCA" -gt 0 ] || [ "$CRIT_TRIVY" -gt 0 ]; then
            echo "❌ Blocking deployment due to critical vulnerabilities!"
            exit 1
          fi

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: security-gate
    steps:
      - name: Set Env
        id: set-url
        run: |
          if [ "${GITHUB_REF_NAME}" = "test" ]; then
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_TEST }}" >> $GITHUB_ENV
            echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "service_id=${{ secrets.RENDER_SERVICE_ID_PROD }}" >> $GITHUB_ENV
            echo "url=https://student-management-prod.onrender.com" >> $GITHUB_OUTPUT
          fi
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${service_id}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline
        env:
          URL: ${{ needs.deploy.outputs.url }}
        run: |
          mkdir -p zap-output
          docker run --rm \
            --user root \
            -v "$(pwd)/zap-output:/zap/wrk:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t $URL \
            -a -m 5 \
            -r /zap/wrk/zap-report.html \
            -w /zap/wrk/zap-report.md \
            -J /zap/wrk/zap-report.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-output/*

  report:
    name: 📊 Unified Security Report
    runs-on: ubuntu-latest
    needs: [sca, container-scan, iac-scan, dast]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - uses: actions/download-artifact@v4
        with:
          name: zap-report
          path: reports/dast

      - name: Generate Unified Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html

          echo "<html><head><meta charset='UTF-8'><title>Unified Security Report</title>" > $REPORT
          echo "<style>body{font-family:Arial;} table{border-collapse:collapse;width:100%;margin:15px 0;} th,td{border:1px solid #ddd;padding:8px;} th{background:#333;color:#fff;} tr:nth-child(even){background:#f2f2f2;} h2{margin-top:30px;color:#333;}</style>" >> $REPORT
          echo "</head><body><h1>🔒 Unified Security Report</h1>" >> $REPORT

          echo "<table><tr><th>Tool</th><th>Critical</th><th>High</th><th>Medium</th><th>Low</th></tr>" >> $REPORT

          # SCA
          if [ -f reports/sca/dependency-check-report.json ]; then
            CRIT=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Critical")] | length' reports/sca/dependency-check-report.json)
            HIGH=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="High")] | length' reports/sca/dependency-check-report.json)
            MED=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Medium")] | length' reports/sca/dependency-check-report.json)
            LOW=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="Low")] | length' reports/sca/dependency-check-report.json)
            echo "<tr><td>SCA</td><td>$CRIT</td><td>$HIGH</td><td>$MED</td><td>$LOW</td></tr>" >> $REPORT
          fi

          # Container
          if [ -f reports/container/trivy-report.json ]; then
            CRIT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' reports/container/trivy-report.json)
            HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' reports/container/trivy-report.json)
            MED=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' reports/container/trivy-report.json)
            LOW=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' reports/container/trivy-report.json)
            echo "<tr><td>Container</td><td>$CRIT</td><td>$HIGH</td><td>$MED</td><td>$LOW</td></tr>" >> $REPORT
          fi

          # IaC
          if [ -f reports/iac/checkov-report.json ]; then
            HIGH=$(jq '[.results.failed_checks[]? | select(.severity=="HIGH")] | length' reports/iac/checkov-report.json)
            MED=$(jq '[.results.failed_checks[]? | select(.severity=="MEDIUM")] | length' reports/iac/checkov-report.json)
            LOW=$(jq '[.results.failed_checks[]? | select(.severity=="LOW")] | length' reports/iac/checkov-report.json)
            echo "<tr><td>IaC</td><td>-</td><td>$HIGH</td><td>$MED</td><td>$LOW</td></tr>" >> $REPORT
          fi

          # DAST
          if [ -f reports/dast/zap-report.json ]; then
            HIGH=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' reports/dast/zap-report.json)
            MED=$(jq '[.site[].alerts[] | select(.riskcode=="2")] | length' reports/dast/zap-report.json)
            LOW=$(jq '[.site[].alerts[] | select(.riskcode=="1")] | length' reports/dast/zap-report.json)
            echo "<tr><td>DAST</td><td>-</td><td>$HIGH</td><td>$MED</td><td>$LOW</td></tr>" >> $REPORT
          fi

          echo "</table><p>✅ Generated on $(date)</p></body></html>" >> $REPORT

      - uses: actions/upload-artifact@v4
        with:
          name: unified-security-report
          path: reports/final/security-report.html

  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [report]
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: unified-security-report
          path: reports/final

      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${GITHUB_REF_NAME}"
          REPO="${{ github.repository }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "$STATUS" = "success" ]; then
            EMOJI="✅"
            MSG="Pipeline thành công"
          else
            EMOJI="❌"
            MSG="Pipeline thất bại"
          fi

          curl -F "payload_json={\"content\":\"${EMOJI} ${MSG} cho **${REPO}** (branch: \`${BRANCH}\`)\\n🔗 Run: ${RUN_URL}\"}" \
               -F "file=@reports/final/security-report.html" \
               "$DISCORD_WEBHOOK_URL"
