name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-deps-report.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif

  container_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/student-management:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/student-management:latest
      - uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/student-management:latest
          format: sarif
          output: trivy-image-report.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report.sarif

  iac_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform,kubernetes
          output_file_path: ./checkov-results.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: ./checkov-results.sarif

  security-gate:
    runs-on: ubuntu-latest
    needs: [sca, container_scan, iac_scan]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: reports
      - run: |
          set -e

          check_sarif() {
            local file=$1
            local crit=$(jq '[.runs[].results[]? 
              | select(.ruleIndex as $ri | .runs[].tool.driver.rules[$ri].properties.tags[]? == "CRITICAL")] | length' $file)
            local high=$(jq '[.runs[].results[]? 
              | select(.ruleIndex as $ri | .runs[].tool.driver.rules[$ri].properties.tags[]? == "HIGH")] | length' $file)
            echo "File: $file → CRITICAL=$crit, HIGH=$high"
            if [ "$crit" -gt 0 ] || [ "$high" -gt 0 ]; then
              echo "❌ Security gate failed on $file"
              exit 1
            fi
          }

          check_sarif reports/trivy-deps-report/trivy-deps-report.sarif
          check_sarif reports/trivy-image-report/trivy-image-report.sarif
          check_sarif reports/checkov-results/checkov-results.sarif

  dast:
    runs-on: ubuntu-latest
    needs: [security-gate]
    steps:
      - uses: actions/checkout@v4
      - run: docker run -d -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/student-management:latest
      - run: |
          docker run --network host \
            -v $(pwd):/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://localhost:5000 -J zap-report.json -r zap-report.html
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap-report.json
            zap-report.html

  report:
    runs-on: ubuntu-latest
    needs: [sca, container_scan, iac_scan, dast]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: reports
      - run: |
          echo "# 📊 Security Report" > security-report.md
          echo "" >> security-report.md

          parse_sarif() {
            local file=$1
            local name=$2
            local crit=$(jq '[.runs[].results[]? 
              | select(.ruleIndex as $ri | .runs[].tool.driver.rules[$ri].properties.tags[]? == "CRITICAL")] | length' $file)
            local high=$(jq '[.runs[].results[]? 
              | select(.ruleIndex as $ri | .runs[].tool.driver.rules[$ri].properties.tags[]? == "HIGH")] | length' $file)
            echo "## $name" >> security-report.md
            echo "- CRITICAL: $crit" >> security-report.md
            echo "- HIGH: $high" >> security-report.md
            echo "" >> security-report.md
          }

          parse_sarif reports/trivy-deps-report/trivy-deps-report.sarif "SCA (Dependencies)"
          parse_sarif reports/trivy-image-report/trivy-image-report.sarif "Container Scan"
          parse_sarif reports/checkov-results/checkov-results.sarif "IaC Security"

          echo "## DAST (OWASP ZAP)" >> security-report.md
          if [ -f reports/zap-report/zap-report.json ]; then
            crit=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' reports/zap-report/zap-report.json)
            high=$(jq '[.site[].alerts[] | select(.risk == "Medium")] | length' reports/zap-report/zap-report.json)
            echo "- HIGH: $crit" >> security-report.md
            echo "- MEDIUM: $high" >> security-report.md
          else
            echo "No ZAP report found." >> security-report.md
          fi

          cat security-report.md

      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
