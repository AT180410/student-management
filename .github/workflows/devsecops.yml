name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Trivy for Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - run: ./mvnw -B compile dependency:tree
      - name: Run Trivy dependency scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-deps-report.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: 0
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-container-report.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: trivy-container-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IaC scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  # üîí SECURITY GATE
  security-gate:
    name: üîí Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
      critical_count: ${{ steps.check-gate.outputs.critical_count }}
      high_count: ${{ steps.check-gate.outputs.high_count }}
    steps:
      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq bc
      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - name: Unified SARIF Analysis
        id: check-gate
        run: |
          set -e
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          ALL_VULN=""
          parse_sarif() {
            local file=$1
            local tool=$2
            if [ ! -f "$file" ]; then
              echo "‚ö†Ô∏è $tool report missing"
              return
            fi
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              rule=$(echo "$line" | jq -r '.ruleId // "Unknown"')
              sev=$(echo "$line" | jq -r '.level // .properties.severity // "UNKNOWN"')
              score=0
              case $(echo "$sev" | tr '[:lower:]' '[:upper:]') in
                "CRITICAL"|"ERROR") score=9.5 ;;
                "HIGH"|"WARNING") score=7.5 ;;
                "MEDIUM") score=5.0 ;;
                "LOW"|"NOTE") score=3.0 ;;
              esac
              if (( $(echo "$score >= 9.0" | bc -l) )); then
                TOTAL_CRITICAL=$((TOTAL_CRITICAL+1))
                ALL_VULN+="üö® CRITICAL ($tool): $rule\n"
              elif (( $(echo "$score >= 7.0" | bc -l) )); then
                TOTAL_HIGH=$((TOTAL_HIGH+1))
                ALL_VULN+="‚ö†Ô∏è HIGH ($tool): $rule\n"
              fi
            done < <(jq -c '.runs[0].results[]?' "$file" 2>/dev/null || true)
          }
          parse_sarif reports/trivy-deps-report.sarif SCA
          parse_sarif reports/trivy-container-report.sarif Container
          parse_sarif reports/iac/checkov-results.sarif IaC
          echo "üö® Critical: $TOTAL_CRITICAL"
          echo "‚ö†Ô∏è High: $TOTAL_HIGH"
          echo -e "$ALL_VULN"
          echo "passed=$([ $TOTAL_CRITICAL -eq 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "critical_count=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high_count=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          [ $TOTAL_CRITICAL -gt 0 ] && exit 1

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: security-gate
    if: needs.security-gate.outputs.passed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com" \
            -r zap-report.html -w zap-warnings.md -J zap-report.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap-report.html
            zap-warnings.md
            zap-report.json

  report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-gate, dast]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: reports
          merge-multiple: true
      - name: Generate Final Security Report
        run: |
          echo "# Security Report" > final-report.md
          echo "## Summary" >> final-report.md
          echo "- Critical: ${{ needs.security-gate.outputs.critical_count }}" >> final-report.md
          echo "- High: ${{ needs.security-gate.outputs.high_count }}" >> final-report.md
          echo "## DAST Findings" >> final-report.md
          cat reports/zap-warnings.md >> final-report.md || echo "No DAST warnings" >> final-report.md
      - uses: actions/upload-artifact@v4
        with:
          name: final-report
          path: final-report.md

  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [report, security-gate]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: final-report
          path: .
      - name: Send Notification to Discord
        run: |
          STATUS="‚úÖ PASSED"
          if [ "${{ needs.security-gate.outputs.passed }}" != "true" ]; then
            STATUS="‚ùå FAILED"
          fi
          REPORT=$(cat final-report.md)
          PAYLOAD=$(jq -n --arg content "**Security Gate:** $STATUS\n\n\`\`\`\n$REPORT\n\`\`\`" '{content: $content}')
          curl -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            ${{ secrets.DISCORD_WEBHOOK }}
