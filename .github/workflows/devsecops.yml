name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Trivy for Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java for Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Build with Maven to generate dependencies
        run: |
          chmod +x ./mvnw
          ./mvnw -B compile dependency:tree
          
      - name: Run Trivy vulnerability scanner for dependencies
        uses: aquasecurity/trivy-action@master
        id: trivy-deps
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-deps-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0

      - name: Upload Trivy SCA report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-container-report.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: trivy-container-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IoC scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

     # 🔒 FIXED SECURITY GATE - CHỈ KIỂM TRA TRONG TAGS
  security-gate:
    name: 🔒 Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac

      - name: Analyze Security Reports
        id: check-gate
        run: |
          set -e
          echo "🔒 Analyzing Security Reports (Tags Only)..."
          FAIL=0
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          
          # 📦 SCA - TRIVY DEPENDENCIES - CHỈ KIỂM TRA TAGS
          if [ -f "reports/trivy-deps-report.sarif" ]; then
            echo "📦 Analyzing SCA results (Trivy Dependencies)..."
            
            # Kiểm tra cấu trúc tags của file SARIF
            echo "🔍 Checking SARIF tags structure..."
            jq '.runs[0].results[0] | {message, properties}' "reports/trivy-deps-report.sarif" 2>/dev/null || echo "Cannot parse SARIF structure"
            
            # Đếm vulnerabilities dựa trên tags
            SCA_CRITICAL=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' "reports/trivy-deps-report.sarif" 2>/dev/null || echo "0")
            SCA_HIGH=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' "reports/trivy-deps-report.sarif" 2>/dev/null || echo "0")
            
            echo "🔍 SCA (Tags) - CRITICAL: $SCA_CRITICAL, HIGH: $SCA_HIGH"
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + SCA_CRITICAL))
            TOTAL_HIGH=$((TOTAL_HIGH + SCA_HIGH))
            
            if [ "$SCA_CRITICAL" -gt 0 ]; then
              echo "❌ SCA found $SCA_CRITICAL CRITICAL vulnerabilities (by tags)"
              FAIL=1
            fi
          fi

          # 🐳 CONTAINER SCAN - CHỈ KIỂM TRA TAGS
          if [ -f "reports/trivy-container-report.sarif" ]; then
            echo "🐳 Analyzing Container Scan results..."
            
            CONTAINER_CRITICAL=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' "reports/trivy-container-report.sarif" 2>/dev/null || echo "0")
            CONTAINER_HIGH=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' "reports/trivy-container-report.sarif" 2>/dev/null || echo "0")
            
            echo "🔍 Container (Tags) - CRITICAL: $CONTAINER_CRITICAL, HIGH: $CONTAINER_HIGH"
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + CONTAINER_CRITICAL))
            TOTAL_HIGH=$((TOTAL_HIGH + CONTAINER_HIGH))
            
            if [ "$CONTAINER_CRITICAL" -gt 0 ]; then
              echo "❌ Container scan found $CONTAINER_CRITICAL CRITICAL vulnerabilities (by tags)"
              FAIL=1
            fi
          fi

          # 🔧 IAC SCAN - CHECKOV (sử dụng tags)
          if [ -f "reports/iac/checkov-results.sarif" ]; then
            echo "🔧 Analyzing IaC results..."
            
            IAC_CRITICAL=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' "reports/iac/checkov-results.sarif" 2>/dev/null || echo "0")
            IAC_HIGH=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' "reports/iac/checkov-results.sarif" 2>/dev/null || echo "0")
            
            echo "🔍 IaC (Tags) - CRITICAL: $IAC_CRITICAL, HIGH: $IAC_HIGH"
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + IAC_CRITICAL))
            TOTAL_HIGH=$((TOTAL_HIGH + IAC_HIGH))
            
            if [ "$IAC_CRITICAL" -gt 0 ]; then
              echo "❌ IaC scan found $IAC_CRITICAL CRITICAL vulnerabilities (by tags)"
              FAIL=1
            fi
          fi

          echo "📊 SECURITY SUMMARY (Tags Analysis):"
          echo "   CRITICAL vulnerabilities: $TOTAL_CRITICAL"
          echo "   HIGH vulnerabilities: $TOTAL_HIGH"
          
          if [ "$FAIL" -eq 1 ]; then
            echo "❌ Security Gate failed - Found $TOTAL_CRITICAL CRITICAL vulnerabilities"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Security Gate passed - No CRITICAL vulnerabilities found"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi
          
  deploy-staging:
    name: 🚀 Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/test' && needs.security-gate.outputs.passed == 'true'
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: |
          echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
  
      - name: Trigger Render Deploy (use Authorization header)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          echo "🚀 Triggering Render deploy for service: $SERVICE_ID"
          curl --silent --show-error --fail -X POST \
            "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
  
      - name: Wait for deployment to be ready
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          echo "⏳ Waiting for $TARGET to become healthy..."
          for i in {1..20}; do
            if curl --silent --fail "$TARGET/actuator/health" > /dev/null; then
              echo "✅ Application is healthy and ready!"
              exit 0
            fi
            echo "Attempt $i/20: not ready yet, retrying in 10s..."
            sleep 10
          done
          echo "❌ Application failed to start within timeout"
          exit 1

  dast:
    name: 🛡️ DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Wait for application to be ready
        run: |
          echo "Waiting for staging application to be ready..."
          for i in {1..30}; do
            if curl --silent --fail ${{ needs.deploy-staging.outputs.url }}/actuator/health > /dev/null; then
              echo "✅ Application is ready!"
              exit 0
            fi
            echo "⏳ Attempt $i: Application not ready yet, waiting 10 seconds..."
            sleep 10
          done
          echo "❌ Application failed to become ready within timeout"
          exit 1
      - name: Run ZAP Baseline Scan (console only)
        run: |
          echo "🚀 Starting ZAP scan against: ${{ needs.deploy-staging.outputs.url }}"
          set +e
          docker run --rm \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" \
            -a \
            -m 10 \
            -T 180 | tee zap-console.log
          echo "ZAP finished with exit code: $?"
          echo "🔎 Filtering only ALERTS and FAILURES..."
          grep -E "ALERT|FAIL" zap-console.log || true
          set -e

  deploy-production:
    name: 🚀 Deploy to Production (Heroku Docker)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main' && needs.security-gate.outputs.passed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Login to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "${HEROKU_API_KEY}" | docker login --username=_ --password-stdin registry.heroku.com
      - name: Build Docker image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .

      - name: Push Docker image to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release Docker image (use Authorization header)
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          curl --silent --show-error --fail -X POST \
            "https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/releases" \
            -d '{"slug":null,"description":"Deploy via GitHub Actions"}' \
            -H "Content-Type:application/json" \
            -H "Accept: application/vnd.heroku+json; version=3" \
            -H "Authorization: Bearer ${HEROKU_API_KEY}"

  # 📊 FIXED REPORT - CHỈ KIỂM TRA TRONG TAGS
  report:
    name: 📊 Unified Security Report (HTML) - Tags Analysis
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-*-report
          path: reports
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac

      - name: Generate Detailed HTML Report (Tags Based)
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html
          
          cat > $REPORT << 'EOF'
          <html>
          <head>
              <title>🔒 Security Scan Report (Tags Analysis)</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #eee; }
                  .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
                  .card { padding: 20px; border-radius: 8px; text-align: center; }
                  .critical { background-color: #ffebee; border-left: 4px solid #d32f2f; }
                  .high { background-color: #fff3e0; border-left: 4px solid #f57c00; }
                  .passed { background-color: #e8f5e8; border-left: 4px solid #4caf50; }
                  .vuln-list { margin: 20px 0; }
                  .vuln-item { padding: 15px; margin: 10px 0; border-radius: 5px; background: #fafafa; }
                  .vuln-critical { border-left: 4px solid #d32f2f; }
                  .vuln-high { border-left: 4px solid #f57c00; }
                  .timestamp { color: #666; font-size: 14px; }
                  .tag-info { font-size: 12px; color: #666; margin-top: 5px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🔒 Security Scan Report (Tags Analysis)</h1>
                      <p class="timestamp">Generated on: $(date)</p>
                      <p class="tag-info">Analysis based on vulnerability tags</p>
                  </div>
          EOF
          
          # Initialize counters
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          
          # 📦 SCA Section - DỰA TRÊN TAGS
          echo "<div class='card'><h2>📦 SCA - Dependency Vulnerabilities</h2>" >> $REPORT
          if [ -f "reports/trivy-deps-report.sarif" ]; then
            SCA_CRITICAL=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' "reports/trivy-deps-report.sarif" 2>/dev/null || echo "0")
            SCA_HIGH=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' "reports/trivy-deps-report.sarif" 2>/dev/null || echo "0")
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + SCA_CRITICAL))
            TOTAL_HIGH=$((TOTAL_HIGH + SCA_HIGH))
            
            echo "<div class='vuln-list'>" >> $REPORT
            echo "<p><span style='color: #d32f2f; font-weight: bold;'>CRITICAL: $SCA_CRITICAL</span> | <span style='color: #f57c00; font-weight: bold;'>HIGH: $SCA_HIGH</span></p>" >> $REPORT
            
            # Hiển thị các vulnerability có tag CRITICAL
            jq -r '.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL")) | "\(.message.text) | Tags: \([.properties.tags[]?] | join(", "))"' "reports/trivy-deps-report.sarif" 2>/dev/null | while read -r vuln; do
              if [ -n "$vuln" ]; then
                echo "<div class='vuln-item vuln-critical'>🚨 CRITICAL: $vuln</div>" >> $REPORT
              fi
            done
            
            # Hiển thị các vulnerability có tag HIGH
            jq -r '.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH")) | "\(.message.text)"' "reports/trivy-deps-report.sarif" 2>/dev/null | head -3 | while read -r vuln; do
              if [ -n "$vuln" ]; then
                echo "<div class='vuln-item vuln-high'>⚠️ HIGH: $vuln</div>" >> $REPORT
              fi
            done
            
            echo "</div>" >> $REPORT
          else
            echo "<p>No SCA report available</p>" >> $REPORT
          fi
          echo "</div>" >> $REPORT
          
          # 🐳 Container Section - DỰA TRÊN TAGS
          echo "<div class='card'><h2>🐳 Container Vulnerabilities</h2>" >> $REPORT
          if [ -f "reports/trivy-container-report.sarif" ]; then
            CONTAINER_CRITICAL=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' "reports/trivy-container-report.sarif" 2>/dev/null || echo "0")
            CONTAINER_HIGH=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' "reports/trivy-container-report.sarif" 2>/dev/null || echo "0")
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + CONTAINER_CRITICAL))
            TOTAL_HIGH=$((TOTAL_HIGH + CONTAINER_HIGH))
            
            echo "<div class='vuln-list'>" >> $REPORT
            echo "<p><span style='color: #d32f2f; font-weight: bold;'>CRITICAL: $CONTAINER_CRITICAL</span> | <span style='color: #f57c00; font-weight: bold;'>HIGH: $CONTAINER_HIGH</span></p>" >> $REPORT
            
            jq -r '.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL")) | "\(.message.text)"' "reports/trivy-container-report.sarif" 2>/dev/null | while read -r vuln; do
              if [ -n "$vuln" ]; then
                echo "<div class='vuln-item vuln-critical'>🚨 CRITICAL: $vuln</div>" >> $REPORT
              fi
            done
            
            jq -r '.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH")) | "\(.message.text)"' "reports/trivy-container-report.sarif" 2>/dev/null | head -3 | while read -r vuln; do
              if [ -n "$vuln" ]; then
                echo "<div class='vuln-item vuln-high'>⚠️ HIGH: $vuln</div>" >> $REPORT
              fi
            done
            
            echo "</div>" >> $REPORT
          else
            echo "<p>No container scan report available</p>" >> $REPORT
          fi
          echo "</div>" >> $REPORT
          
          # 🔧 IaC Section - DỰA TRÊN TAGS
          echo "<div class='card'><h2>🔧 IaC Security (Checkov)</h2>" >> $REPORT
          if [ -f "reports/iac/checkov-results.sarif" ]; then
            IAC_CRITICAL=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' "reports/iac/checkov-results.sarif" 2>/dev/null || echo "0")
            IAC_HIGH=$(jq -r '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' "reports/iac/checkov-results.sarif" 2>/dev/null || echo "0")
            TOTAL_CRITICAL=$((TOTAL_CRITICAL + IAC_CRITICAL))
            TOTAL_HIGH=$((TOTAL_HIGH + IAC_HIGH))
            
            echo "<div class='vuln-list'>" >> $REPORT
            echo "<p><span style='color: #d32f2f; font-weight: bold;'>CRITICAL: $IAC_CRITICAL</span> | <span style='color: #f57c00; font-weight: bold;'>HIGH: $IAC_HIGH</span></p>" >> $REPORT
            
            jq -r '.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL")) | "\(.message.text)"' "reports/iac/checkov-results.sarif" 2>/dev/null | while read -r vuln; do
              if [ -n "$vuln" ]; then
                echo "<div class='vuln-item vuln-critical'>🚨 CRITICAL: $vuln</div>" >> $REPORT
              fi
            done
            
            jq -r '.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH")) | "\(.message.text)"' "reports/iac/checkov-results.sarif" 2>/dev/null | head -3 | while read -r vuln; do
              if [ -n "$vuln" ]; then
                echo "<div class='vuln-item vuln-high'>⚠️ HIGH: $vuln</div>" >> $REPORT
              fi
            done
            
            echo "</div>" >> $REPORT
          else
            echo "<p>No IaC scan report available</p>" >> $REPORT
          fi
          echo "</div>" >> $REPORT
          
          # Summary Section
          echo "<div class='summary'>" >> $REPORT
          echo "<div class='card critical'><h3>🚨 Total CRITICAL</h3><h1>$TOTAL_CRITICAL</h1></div>" >> $REPORT
          echo "<div class='card high'><h3>⚠️ Total HIGH</h3><h1>$TOTAL_HIGH</h1></div>" >> $REPORT
          if [ "$TOTAL_CRITICAL" -eq 0 ]; then
            echo "<div class='card passed'><h3>✅ Security Status</h3><h1>PASSED</h1></div>" >> $REPORT
          else
            echo "<div class='card critical'><h3>❌ Security Status</h3><h1>FAILED</h1></div>" >> $REPORT
          fi
          echo "</div>" >> $REPORT
          
          echo "</div></body></html>" >> $REPORT
          
          echo "📊 Generated security report based on tags:"
          echo "   🚨 CRITICAL vulnerabilities: $TOTAL_CRITICAL"
          echo "   ⚠️ HIGH vulnerabilities: $TOTAL_HIGH"

      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html

  notify:
    name: 📢 Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, report]
    if: always()
    steps:
      - name: ✅ Notify Success
        if: ${{ success() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ✅ **Pipeline SUCCESS** cho `${{ github.repository }}`
            🔀 Branch: `${{ github.ref_name }}`
            📌 Status: **SUCCESS**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
      - name: ❌ Notify Failure
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ❌ **Pipeline FAILED** cho `${{ github.repository }}`
            🔀 Branch: `${{ github.ref_name }}`
            📌 Status: **FAILED**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
            🚨 Hãy kiểm tra lại logs chi tiết trong GitHub Action
