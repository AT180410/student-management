name: DevSecOps CI/CD

on:
  push:
    branches: [ main, test ]
  pull_request:
    branches: [ main ]

jobs:
  # ---------------------------
  # Build
  # ---------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: ./mvnw -B package --file pom.xml

  # ---------------------------
  # SCA (Dependencies) - Trivy
  # ---------------------------
  sca:
    name: SCA (Trivy Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x ./mvnw
      - name: Compile to resolve dependencies
        run: ./mvnw -B compile dependency:tree
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-deps-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  # ---------------------------
  # SAST
  # ---------------------------
  sast:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ---------------------------
  # Container Scan
  # ---------------------------
  container-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'student-management:latest'
          format: 'sarif'
          output: 'trivy-image-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image-report.sarif

  # ---------------------------
  # IaC Scan (Checkov)
  # ---------------------------
  iac-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov IaC Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: sarif
          output_file_path: checkov-report.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-report.sarif

  # ---------------------------
  # Security Gate
  # ---------------------------
  security-gate:
    name: 🔒 Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - uses: actions/download-artifact@v4
        with:
          pattern: "*-report"
          path: reports
          merge-multiple: true
      - name: Analyze Security Reports
        id: check-gate
        run: |
          FAIL=0
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          for report in reports/*.sarif; do
            if [[ "$report" == *zap* ]]; then
              echo "⏩ Skipping DAST report: $report"
              continue
            fi
            echo "🔎 Checking $report ..."
            CRITICAL=$(jq '[.runs[0].results[]? | select(.properties.tags[]? | contains("CRITICAL"))] | length' "$report")
            HIGH=$(jq '[.runs[0].results[]? | select(.properties.tags[]? | contains("HIGH"))] | length' "$report")
            echo "  -> Critical: $CRITICAL | High: $HIGH"
            TOTAL_CRITICAL=$((TOTAL_CRITICAL+CRITICAL))
            TOTAL_HIGH=$((TOTAL_HIGH+HIGH))
            if [ "$CRITICAL" -gt 0 ]; then FAIL=1; fi
          done
          echo "📊 SUMMARY:"
          echo "  CRITICAL: $TOTAL_CRITICAL"
          echo "  HIGH: $TOTAL_HIGH"
          if [ "$FAIL" -eq 1 ]; then
            echo "❌ Security Gate failed"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Security Gate passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

  # ---------------------------
  # DAST (Zap baseline)
  # ---------------------------
  dast:
    runs-on: ubuntu-latest
    needs: deploy-render
    steps:
      - uses: actions/checkout@v4
      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t https://student-management-test.onrender.com \
            -g gen.conf -x zap-report.sarif -w zap-report.md || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.sarif

  # ---------------------------
  # Deploy to Render (Test)
  # ---------------------------
  deploy-render:
    name: Deploy to Render (Test)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          curl --silent --show-error --fail -X POST \
            "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d '{}'

  # ---------------------------
  # Deploy to Heroku (Prod)
  # ---------------------------
  deploy-heroku:
    name: Deploy to Heroku (Prod)
    runs-on: ubuntu-latest
    needs: [security-gate]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          echo "${HEROKU_API_KEY}" | docker login --username=_ --password-stdin registry.heroku.com
      - name: Build and Push Docker image to Heroku
        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          docker build -t registry.heroku.com/${HEROKU_APP_NAME}/web .
          docker push registry.heroku.com/${HEROKU_APP_NAME}/web
      - name: Release Docker image on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          docker run --rm -e HEROKU_API_KEY=${HEROKU_API_KEY} \
            heroku/heroku:20 bash -c "heroku container:release web -a ${HEROKU_APP_NAME}"

  # ---------------------------
  # Notify (Discord)
  # ---------------------------
  notify:
    runs-on: ubuntu-latest
    needs: [build, sca, sast, container-scan, iac-scan, security-gate, deploy-render, dast, deploy-heroku]
    if: always()
    steps:
      - name: Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ✅ CI/CD pipeline finished.
            Build: ${{ needs.build.result }}
            SCA: ${{ needs.sca.result }}
            SAST: ${{ needs.sast.result }}
            Container: ${{ needs.container-scan.result }}
            IaC: ${{ needs.iac-scan.result }}
            Security Gate: ${{ needs.security-gate.result }}
            Deploy (Render): ${{ needs.deploy-render.result }}
            DAST: ${{ needs.dast.result }}
            Deploy (Heroku): ${{ needs.deploy-heroku.result }}
