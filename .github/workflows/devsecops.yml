name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Cache OWASP Dependency-Check data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-
      - name: Run Dependency Check
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -Dformat=JSON \
            -Dnvd.api.enabled=false \
            -Dnvd.failOnError=false \
            -Ddependency-check.skipTestScope=true
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.*

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-report.sarif
          severity: CRITICAL  # CH·ªà qu√©t CRITICAL vi·∫øt hoa
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  security-gate:
    name: üîí Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
        
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
        
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac

      - name: Analyze Security Reports
        id: check-gate
        run: |
          echo "üîí Analyzing Security Reports..."
          FAIL=0
          
          # Ph√¢n t√≠ch Container Scan results - CH·ªà kh·ªõp v·ªõi CRITICAL vi·∫øt hoa
          if [ -f reports/container/trivy-report.sarif ]; then
            echo "üê≥ Analyzing Container Scan results..."
            CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL") | .ruleId' reports/container/trivy-report.sarif | wc -l)
            if [ "$CRITICAL_COUNT" -eq 0 ]; then
              CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.message.text | test("CRITICAL")) | .ruleId' reports/container/trivy-report.sarif | wc -l)
            fi
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "‚ùå Container scan found $CRITICAL_COUNT CRITICAL vulnerabilities"
              jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL" or (.message.text | test("CRITICAL"))) | "\(.ruleId) - CRITICAL - \(.message.text)"' reports/container/trivy-report.sarif | head -5
              FAIL=1
            fi
          fi

          # Ph√¢n t√≠ch SCA results - CH·ªà kh·ªõp v·ªõi CRITICAL vi·∫øt hoa
          if [ -f reports/sca/dependency-check-report.json ]; then
            echo "üì¶ Analyzing SCA results..."
            CRITICAL_COUNT=$(jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL") | .name' reports/sca/dependency-check-report.json | wc -l)
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "‚ùå SCA found $CRITICAL_COUNT CRITICAL vulnerabilities"
              jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL") | "\(.name) - CRITICAL - \(.description)"' reports/sca/dependency-check-report.json | head -5
              FAIL=1
            fi
          fi

          # Ph√¢n t√≠ch IaC Scan results - CH·ªà kh·ªõp v·ªõi CRITICAL vi·∫øt hoa
          if [ -f reports/iac/checkov-results.sarif ]; then
            echo "‚òÅÔ∏è Analyzing IaC Scan results..."
            CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL") | .ruleId' reports/iac/checkov-results.sarif | wc -l)
            if [ "$CRITICAL_COUNT" -eq 0 ]; then
              CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.message.text | test("CRITICAL")) | .ruleId' reports/iac/checkov-results.sarif | wc -l)
            fi
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "‚ùå IaC scan found $CRITICAL_COUNT CRITICAL vulnerabilities"
              jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL" or (.message.text | test("CRITICAL"))) | "\(.ruleId) - CRITICAL - \(.message.text)"' reports/iac/checkov-results.sarif | head -5
              FAIL=1
            fi
          fi

          if [ "$FAIL" -eq 1 ]; then
            echo "‚ùå Security Gate failed - Found CRITICAL vulnerabilities"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Security Gate passed - No CRITICAL vulnerabilities found"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: security-gate
    if: needs.security-gate.outputs.passed == 'true' && (github.ref == 'refs/heads/test' || github.event_name == 'pull_request')
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: |
          echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
      - name: Wait for deployment to be ready
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          for i in {1..20}; do
            if curl -fs $TARGET/actuator/health; then
              echo "‚úÖ Application is healthy!"
              exit 0
            fi
            echo "‚è≥ Application not ready yet, retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Application failed to start within timeout"
          exit 1

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - uses: actions/checkout@v4
  
      - name: Run ZAP Baseline Scan
        run: |
          mkdir -p zap-output
          docker run --network="host" \
            -v ${{ github.workspace }}/zap-output:/zap/wrk/:rw \
            zaproxy/zap-stable zap-baseline.py \
            -t ${{ secrets.TARGET_URL }} \
            -g gen.conf \
            -x zap-output/zap-report.xml \
            -J zap-output/zap-report.json \
            -r zap-output/zap-report.html || true   # üëà kh√¥ng ch·∫∑n pipeline khi c√≥ High/Medium
  
      - name: Convert ZAP JSON to SARIF
        run: |
          npm install -g @microsoft/sarif-multitool
          sarif-multitool convert zap-output/zap-report.json --output zap-output/zap-report.sarif
  
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-output/
  
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-output/zap-report.sarif

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-gate, dast]
    if: |
      needs.security-gate.outputs.passed == 'true' &&
      github.ref == 'refs/heads/main' &&
      (needs.dast.result == 'success' || needs.dast.result == 'skipped')
    steps:
      - name: Trigger Production Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_PROD }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"

  report:
    name: üìä Unified Security Report (HTML)
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan, dast]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - uses: actions/download-artifact@v4
        with:
          name: zap-report
          path: reports/dast
      - name: Generate Unified HTML Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html

          echo "<html><head><meta charset='UTF-8'><title>Unified Security Report</title>" > $REPORT
          echo "<style>body{font-family:Arial;} table{border-collapse:collapse;width:100%;margin:15px 0;} th,td{border:1px solid #ddd;padding:8px;} th{background:#333;color:#fff;} tr:nth-child(even){background:#f2f2f2;} h2{margin-top:30px;color:#333;}.critical{color:red;font-weight:bold;} .high{color:orange;font-weight:bold;}</style>" >> $REPORT
          echo "</head><body>" >> $REPORT
          echo "<h1>üîí Unified Security Report</h1>" >> $REPORT
          echo "<p>‚úÖ Generated on $(date)</p>" >> $REPORT

          # Summary (CRITICAL & HIGH uppercase)
          echo "<h2>üìä Summary (CRITICAL & HIGH)</h2><table><tr><th>Tool</th><th>HIGH</th><th>CRITICAL</th></tr>" >> $REPORT

          if [ -f reports/sca/dependency-check-report.json ]; then
            SCA_HIGH=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity=="HIGH")] | length' reports/sca/dependency-check-report.json)
            SCA_CRIT=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity=="CRITICAL")] | length' reports/sca/dependency-check-report.json)
            echo "<tr><td>SCA (Dependency-Check)</td><td>$SCA_HIGH</td><td>$SCA_CRIT</td></tr>" >> $REPORT
          else
            echo "<tr><td>SCA (Dependency-Check)</td><td>-</td><td>-</td></tr>" >> $REPORT
          fi

          if [ -f reports/container/trivy-report.sarif ]; then
            T_HIGH=$(jq '[.runs[0].results[]? | select(.level=="warning")] | length' reports/container/trivy-report.sarif)
            T_CRIT=$(jq '[.runs[0].results[]? | select(.level=="error")] | length' reports/container/trivy-report.sarif)
            echo "<tr><td>Container (Trivy)</td><td>$T_HIGH</td><td>$T_CRIT</td></tr>" >> $REPORT
          else
            echo "<tr><td>Container (Trivy)</td><td>-</td><td>-</td></tr>" >> $REPORT
          fi

          if [ -f reports/iac/checkov-results.sarif ]; then
            C_HIGH=$(jq '[.runs[0].results[]? | select(.level=="warning")] | length' reports/iac/checkov-results.sarif)
            C_CRIT=$(jq '[.runs[0].results[]? | select(.level=="error")] | length' reports/iac/checkov-results.sarif)
            echo "<tr><td>IaC (Checkov)</td><td>$C_HIGH</td><td>$C_CRIT</td></tr>" >> $REPORT
          else
            echo "<tr><td>IaC (Checkov)</td><td>-</td><td>-</td></tr>" >> $REPORT
          fi

          if [ -f reports/dast/zap-report.json ]; then
            Z_HIGH=$(jq '[.site[]?.alerts[]? | select(.riskcode=="3")] | length' reports/dast/zap-report.json)
            Z_CRIT=$(jq '[.site[]?.alerts[]? | select(.riskcode=="4")] | length' reports/dast/zap-report.json)
            echo "<tr><td>DAST (ZAP)</td><td>$Z_HIGH</td><td>$Z_CRIT</td></tr>" >> $REPORT
          else
            echo "<tr><td>DAST (ZAP)</td><td>-</td><td>-</td></tr>" >> $REPORT
          fi

          echo "</table>" >> $REPORT

          # Details: SCA
          if [ -f reports/sca/dependency-check-report.json ]; then
            echo "<h2>üì¶ SCA (Dependency Check)</h2><table><tr><th>Library</th><th>Severity</th><th>CVE</th></tr>" >> $REPORT
            jq -r '.dependencies[]? | select(.vulnerabilities!=null) | .fileName as $lib | .vulnerabilities[] | select(.severity=="HIGH" or .severity=="CRITICAL") | "<tr><td>"+$lib+"</td><td class=\"" + (if .severity=="CRITICAL" then "critical" else "high" end) + "\">"+.severity+"</td><td>"+(.name // "-")+"</td></tr>"' reports/sca/dependency-check-report.json >> $REPORT
            echo "</table>" >> $REPORT
          fi

          # Details: Trivy
          if [ -f reports/container/trivy-report.sarif ]; then
            echo "<h2>üê≥ Container Scan (Trivy)</h2><table><tr><th>ID</th><th>Message</th><th>Severity</th></tr>" >> $REPORT
            jq -r '.runs[0].results[]? | select(.level=="error" or .level=="warning") | "<tr><td>"+(.ruleId|tostring)+"</td><td>"+(.message.text|tostring)+"</td><td>"+(.level|ascii_upcase)+"</td></tr>"' reports/container/trivy-report.sarif >> $REPORT
            echo "</table>" >> $REPORT
          fi

          # Details: Checkov
          if [ -f reports/iac/checkov-results.sarif ]; then
            echo "<h2>‚òÅÔ∏è IaC Scan (Checkov)</h2><table><tr><th>Rule</th><th>Severity</th><th>Resource</th></tr>" >> $REPORT
            jq -r '.runs[0].results[]? | select(.level=="error" or .level=="warning") | "<tr><td>"+.ruleId+"</td><td>"+(.level|ascii_upcase)+"</td><td>"+(.message.text|tostring)+"</td></tr>"' reports/iac/checkov-results.sarif >> $REPORT
            echo "</table>" >> $REPORT
          fi

          # Details: ZAP
          if [ -f reports/dast/zap-report.json ]; then
            echo "<h2>üåê DAST (OWASP ZAP)</h2><table><tr><th>Alert</th><th>Risk</th><th>URL</th></tr>" >> $REPORT
            jq -r '.site[]?.alerts[]? | select(.riskcode=="3" or .riskcode=="4") | "<tr><td>"+.alert+"</td><td>"+(if .riskcode=="4" then "CRITICAL" else "HIGH" end)+"</td><td>"+(.instances[0].uri // "-")+"</td></tr>"' reports/dast/zap-report.json >> $REPORT
            echo "</table>" >> $REPORT
          fi

          echo "</body></html>" >> $REPORT
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html

  notify:
    name: üì¢ Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-production, report]
    if: always()
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "Pipeline: ${{ github.repository }} - ${{ job.status }}"
          description: |
            Pipeline completed for ${{ github.repository }} on ${{ github.ref_name }}
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
          color: ${{ job.status == 'success' && '65280' || '16711680' }}
