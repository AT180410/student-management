name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - run: ./mvnw -B clean test
      - run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check - Cached, No NVD)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Cache OWASP Dependency-Check data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-
      - name: Run Dependency Check (cached, no NVD)
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -Dformat=ALL \
            -Dnvd.api.enabled=false \
            -Dnvd.failOnError=false \
            -Ddependency-check.skipTestScope=true
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.*

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-report.sarif
          severity: CRITICAL  # CHỈ quét CRITICAL viết hoa
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-report.sarif

  iac-scan:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  security-gate:
    name: 🔒 Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac

      - name: Analyze Security Reports
        id: check-gate
        run: |
          echo "🔒 Analyzing Security Reports..."
          FAIL=0
          
          # Phân tích Container Scan results - CHỈ khớp với CRITICAL viết hoa
          if [ -f reports/container/trivy-report.sarif ]; then
            echo "🐳 Analyzing Container Scan results..."
            CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL") | .ruleId' reports/container/trivy-report.sarif | wc -l)
            if [ "$CRITICAL_COUNT" -eq 0 ]; then
              CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.message.text | test("CRITICAL")) | .ruleId' reports/container/trivy-report.sarif | wc -l)
            fi
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Container scan found $CRITICAL_COUNT CRITICAL vulnerabilities"
              jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL" or (.message.text | test("CRITICAL"))) | "\(.ruleId) - CRITICAL - \(.message.text)"' reports/container/trivy-report.sarif | head -5
              FAIL=1
            fi
          fi

          # Phân tích SCA results - CHỈ khớp với CRITICAL viết hoa
          if [ -f reports/sca/dependency-check-report.json ]; then
            echo "📦 Analyzing SCA results..."
            CRITICAL_COUNT=$(jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL") | .name' reports/sca/dependency-check-report.json | wc -l)
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ SCA found $CRITICAL_COUNT CRITICAL vulnerabilities"
              jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL") | "\(.name) - CRITICAL - \(.description)"' reports/sca/dependency-check-report.json | head -5
              FAIL=1
            fi
          fi

          # Phân tích IaC Scan results - CHỈ khớp với CRITICAL viết hoa
          if [ -f reports/iac/checkov-results.sarif ]; then
            echo "☁️ Analyzing IaC Scan results..."
            CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL") | .ruleId' reports/iac/checkov-results.sarif | wc -l)
            if [ "$CRITICAL_COUNT" -eq 0 ]; then
              CRITICAL_COUNT=$(jq -r '.runs[0].results[]? | select(.message.text | test("CRITICAL")) | .ruleId' reports/iac/checkov-results.sarif | wc -l)
            fi
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ IaC scan found $CRITICAL_COUNT CRITICAL vulnerabilities"
              jq -r '.runs[0].results[]? | select(.properties.overrideSeverity == "CRITICAL" or (.message.text | test("CRITICAL"))) | "\(.ruleId) - CRITICAL - \(.message.text)"' reports/iac/checkov-results.sarif | head -5
              FAIL=1
            fi
          fi

          if [ "$FAIL" -eq 1 ]; then
            echo "❌ Security Gate failed - Found CRITICAL vulnerabilities"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Security Gate passed - No CRITICAL vulnerabilities found"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

  # Giữ nguyên deploy, dast, report, notify như bạn đã có ở trên
