name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: üì¶ SCA (Trivy Dependencies)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: |
          chmod +x ./mvnw
          ./mvnw -B compile dependency:tree
      - name: Run Trivy dependency scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-deps-report.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: trivy-deps-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: üîç SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: üê≥ Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t student-management:latest .
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: sarif
          output: trivy-container-report.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: trivy-container-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: üîß IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli,sarif
          output_file_path: ./checkov-results.sarif
          soft_fail: true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  security-gate:
    name: üîí Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: trivy-deps-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-container-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - id: check-gate
        run: |
          set -e
          echo "üîí Security Gate analysis..."
          FAIL=0

          parse_sarif() {
            local file=$1
            local crit=$(jq '[.runs[].results[]? | select((.properties.severity? | ascii_upcase) == "CRITICAL" or .level=="error")] | length' "$file")
            local high=$(jq '[.runs[].results[]? | select((.properties.severity? | ascii_upcase) == "HIGH" or .level=="warning")] | length' "$file")
            echo "$crit $high"
          }

          # SCA
          if [ -f reports/sca/trivy-deps-report.sarif ]; then
            read CRIT HIGH <<< $(parse_sarif reports/sca/trivy-deps-report.sarif)
            echo "üì¶ SCA - CRITICAL: $CRIT | HIGH: $HIGH"
            [ "$CRIT" -gt 0 ] && FAIL=1
          fi

          # Container
          if [ -f reports/container/trivy-container-report.sarif ]; then
            read CRIT HIGH <<< $(parse_sarif reports/container/trivy-container-report.sarif)
            echo "üê≥ Container - CRITICAL: $CRIT | HIGH: $HIGH"
            [ "$CRIT" -gt 0 ] && FAIL=1
          fi

          # IaC
          if [ -f reports/iac/checkov-results.sarif ]; then
            read CRIT HIGH <<< $(parse_sarif reports/iac/checkov-results.sarif)
            echo "üîß IaC - CRITICAL: $CRIT | HIGH: $HIGH"
            [ "$CRIT" -gt 0 ] && FAIL=1
          fi

          if [ "$FAIL" -eq 1 ]; then
            echo "‚ùå Found CRITICAL vulnerabilities"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ No CRITICAL vulnerabilities"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: üöÄ Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/test' && needs.security-gate.outputs.passed == 'true'
    steps:
      - run: echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
        id: set-url
      - env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
          -H "Authorization: Bearer ${RENDER_API_KEY}" -H "Accept: application/json"
      - run: |
          TARGET=${{ steps.set-url.outputs.url }}
          for i in {1..20}; do
            curl --silent --fail "$TARGET/actuator/health" && exit 0
            sleep 10
          done
          exit 1

  dast:
    name: üõ°Ô∏è DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    steps:
      - run: |
          docker run --rm ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" -a -m 10 -T 180 | tee zap-console.log || true

  deploy-production:
    name: üöÄ Deploy to Production (Heroku)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main' && needs.security-gate.outputs.passed == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com
      - run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .
      - run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
      - env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          curl -X POST "https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/releases" \
          -d '{"slug":null,"description":"Deploy via GitHub Actions"}' \
          -H "Content-Type:application/json" -H "Accept: application/vnd.heroku+json; version=3" \
          -H "Authorization: Bearer ${HEROKU_API_KEY}"

  report:
    name: üìä Unified Security Report (HTML)
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with: { name: trivy-deps-report, path: reports/sca }
      - uses: actions/download-artifact@v4
        with: { name: trivy-container-report, path: reports/container }
      - uses: actions/download-artifact@v4
        with: { name: checkov-report, path: reports/iac }
      - run: sudo apt-get update && sudo apt-get install -y jq
      - run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html
          echo "<html><body><h1>üîí Security Scan Report</h1>" > $REPORT

          summarize() {
            local title=$1; local file=$2
            if [ -f "$file" ]; then
              local crit=$(jq '[.runs[].results[]? | select((.properties.severity? | ascii_upcase)=="CRITICAL" or .level=="error")] | length' "$file")
              local high=$(jq '[.runs[].results[]? | select((.properties.severity? | ascii_upcase)=="HIGH" or .level=="warning")] | length' "$file")
              echo "<h2>$title</h2><p>CRITICAL: $crit | HIGH: $high</p>" >> $REPORT
              echo "<pre>$(jq '.' "$file")</pre>" >> $REPORT
            else
              echo "<h2>$title</h2><p>No report</p>" >> $REPORT
            fi
          }

          summarize "üì¶ SCA (Trivy Dependencies)" reports/sca/trivy-deps-report.sarif
          summarize "üê≥ Container (Trivy Image)" reports/container/trivy-container-report.sarif
          summarize "üîß IaC (Checkov)" reports/iac/checkov-results.sarif

          echo "</body></html>" >> $REPORT
      - uses: actions/upload-artifact@v4
        with: { name: security-report, path: reports/final/security-report.html }

  notify:
    name: üì¢ Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, report]
    if: always()
    steps:
      - uses: Ilshidur/action-discord@master
        if: ${{ success() }}
        env: 
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }} 
        with:
          args: |
            ‚úÖ Pipeline SUCCESS for `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Status: **SUCCESS**
      - uses: Ilshidur/action-discord@master
        if: ${{ failure() }}
        env: 
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }} 
        with:
          args: |
            ‚ùå Pipeline FAILED for `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Status: **FAILED**
