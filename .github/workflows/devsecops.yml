name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw -B clean test
      - name: Package
        run: ./mvnw -B package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: 📦 SCA (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Ensure Maven deps
        run: ./mvnw -B compile dependency:tree
      - name: Install Trivy
        run: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
      - name: Trivy FS JSON + SARIF
        run: |
          ./trivy fs --scanners vuln --format json --output trivy-deps-report.json . || true
          ./trivy fs --scanners vuln --format sarif --output trivy-deps-report.sarif . || true
          [ -f trivy-deps-report.sarif ] || echo '{"version":"2.1.0","runs":[]}' > trivy-deps-report.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-deps-report
          path: |
            trivy-deps-report.json
            trivy-deps-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-deps-report.sarif

  sast:
    name: 🔍 SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x ./mvnw
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=AT180410_student-management \
            -Dsonar.organization=at180410 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  container-scan:
    name: 🐳 Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker
        run: docker build -t student-management:latest .
      - name: Install Trivy
        run: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
      - name: Trivy Image JSON + SARIF
        run: |
          ./trivy image --scanners vuln --format json --output trivy-container-report.json student-management:latest || true
          ./trivy image --scanners vuln --format sarif --output trivy-container-report.sarif student-management:latest || true
          [ -f trivy-container-report.sarif ] || echo '{"version":"2.1.0","runs":[]}' > trivy-container-report.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-container-report
          path: |
            trivy-container-report.json
            trivy-container-report.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-report.sarif

  iac-scan:
    name: 🔧 IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        run: |
          pip install --user checkov
          checkov -d . -o sarif --output-file checkov-results.sarif || true
          checkov -d . -o json --output-file checkov-results.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: |
            checkov-results.sarif
            checkov-results.json
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  security-gate:
    name: 🔒 Security Gate
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    outputs:
      passed: ${{ steps.check-gate.outputs.passed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: trivy-deps-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-container-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - run: sudo apt-get update && sudo apt-get install -y jq
      - id: check-gate
        run: |
          set -euo pipefail
          FAIL=0; TOTAL_CRIT=0; TOTAL_HIGH=0
          parse() {
            jq -r '
              [ (.. | objects | .severity? // .level? // empty) | ascii_upcase ] as $s |
              {crit: ([ $s[] | select(.=="CRITICAL")] | length),
               high: ([ $s[] | select(.=="HIGH")] | length)}' "$1"
          }
          for f in reports/**/**/*; do
            [ -f "$f" ] || continue
            crit=$(parse "$f" | jq .crit)
            high=$(parse "$f" | jq .high)
            TOTAL_CRIT=$((TOTAL_CRIT+crit)); TOTAL_HIGH=$((TOTAL_HIGH+high))
          done
          echo "CRITICAL=$TOTAL_CRIT HIGH=$TOTAL_HIGH"
          if [ "$TOTAL_CRIT" -gt 0 ]; then
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: 🚀 Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/test' && needs.security-gate.outputs.passed == 'true'
    outputs:
      url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Set environment URL
        id: set-url
        run: echo "url=https://student-management-test-vrfb.onrender.com" >> $GITHUB_OUTPUT
      - name: Trigger Render Deploy (safer)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_TEST }}
        run: |
          echo "Authorization: Bearer ${RENDER_API_KEY}" > headers.txt
          echo "Accept: application/json" >> headers.txt
          curl --silent --show-error --fail -X POST \
            "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            -K headers.txt
          rm headers.txt
      - name: Wait for deployment
        run: |
          TARGET=${{ steps.set-url.outputs.url }}
          for i in {1..20}; do
            if curl --silent --fail "$TARGET/actuator/health" > /dev/null; then
              exit 0
            fi
            sleep 10
          done
          exit 1

  dast:
    name: 🛡️ DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/test' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - run: |
          for i in {1..30}; do
            if curl --silent --fail ${{ needs.deploy-staging.outputs.url }}/actuator/health > /dev/null; then
              exit 0
            fi
            sleep 10
          done
          exit 1
      - name: Run ZAP Baseline
        run: |
          docker run --rm ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "${{ needs.deploy-staging.outputs.url }}" -a -m 10 -T 180 | tee zap.log

  deploy-production:
    name: 🚀 Deploy to Production (Heroku)
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main' && needs.security-gate.outputs.passed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Login Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo "${HEROKU_API_KEY}" | docker login --username=_ --password-stdin registry.heroku.com
      - name: Build Docker
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .
      - name: Push Docker
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
      - name: Release App
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "Authorization: Bearer ${HEROKU_API_KEY}" > headers.txt
          curl --silent --show-error --fail -X POST \
            "https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/releases" \
            -d '{"slug":null,"description":"Deploy via GitHub Actions"}' \
            -H "Content-Type:application/json" -H "Accept: application/vnd.heroku+json; version=3" \
            -K headers.txt
          rm headers.txt

  report:
    name: 📊 Unified Report
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, iac-scan]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: trivy-deps-report
          path: reports/sca
      - uses: actions/download-artifact@v4
        with:
          name: trivy-container-report
          path: reports/container
      - uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: reports/iac
      - run: sudo apt-get update && sudo apt-get install -y jq
      - name: Generate Report
        run: |
          mkdir -p reports/final
          REPORT=reports/final/security-report.html
          echo "<html><body><h1>Security Report</h1>" > $REPORT
          for f in reports/**/**/*; do
            if [ -f "$f" ]; then
              echo "<h2>$f</h2><pre>$(jq '.' "$f" | head -200)</pre>" >> $REPORT
            fi
          done
          echo "</body></html>" >> $REPORT
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/final/security-report.html

  notify:
    name: 📢 Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, report]
    if: always()
    steps:
      - name: ✅ Notify Success
        if: ${{ success() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ✅ **Pipeline SUCCESS**: `${{ github.repository }}`
            🔀 Branch: `${{ github.ref_name }}`
            📌 Status: **SUCCESS**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
      - name: ❌ Notify Failure
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ❌ **Pipeline FAILED**: `${{ github.repository }}`
            🔀 Branch: `${{ github.ref_name }}`
            📌 Status: **FAILED**
            **SAST:** ${{ needs.sast.result }}
            **SCA:** ${{ needs.sca.result }}
            **Container:** ${{ needs.container-scan.result }}
            **IaC:** ${{ needs.iac-scan.result }}
            **DAST:** ${{ needs.dast.result }}
