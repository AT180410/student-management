name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x mvnw
      - run: ./mvnw -B clean verify
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check + Trivy FS)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x mvnw
      - run: ./mvnw org.owasp:dependency-check-maven:check -Dformat=ALL
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: json
          output: trivy-fs.json
          severity: CRITICAL,HIGH
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report
          path: trivy-fs.json

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x mvnw
      - env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            ./mvnw -B sonar:sonar \
              -Dsonar.projectKey=AT180410_student-management \
              -Dsonar.organization=Trung Du \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${SONAR_TOKEN} \
              -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
              -Dsonar.pullrequest.branch=${{ github.head_ref }} \
              -Dsonar.pullrequest.base=${{ github.base_ref }}
          else
            ./mvnw -B sonar:sonar \
              -Dsonar.projectKey=CTD03_student-management \
              -Dsonar.organization=ctd03 \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${SONAR_TOKEN} \
              -Dsonar.branch.name=${GITHUB_REF_NAME}
          fi

  container-scan:
    name: Container Scan (Trivy Image)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t student-management:latest .
      - name: Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: json
          output: trivy-image.json
          severity: CRITICAL,HIGH
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image.json

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan]
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          path: reports
      - name: Security Gate Check
        run: |
          echo "‚ö° Checking Security Gate..."

          # Ki·ªÉm tra Trivy FS
          if jq -e '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH")' reports/trivy-fs-report/trivy-fs.json > /dev/null; then
            echo "‚ùå Found CRITICAL/HIGH vulnerabilities in source code dependencies (Trivy FS)"
            exit 1
          fi

          # Ki·ªÉm tra Trivy Image
          if jq -e '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")' reports/trivy-image-report/trivy-image.json > /dev/null; then
            echo "‚ùå Found CRITICAL vulnerabilities in Docker image (Trivy Image)"
            exit 1
          fi

          echo "‚úÖ Security Gate passed!"

      - name: Set Env
        run: |
          if [ "${GITHUB_REF_NAME}" = "test" ]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "SERVICE_ID=${{ secrets.RENDER_SERVICE_ID_TEST }}" >> $GITHUB_ENV
          elif [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "SERVICE_ID=${{ secrets.RENDER_SERVICE_ID_PROD }}" >> $GITHUB_ENV
          fi

      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"

      - name: Health check
        run: |
          echo "‚è≥ Waiting for service..."
          sleep 30
          curl -f https://student-management-${GITHUB_REF_NAME}.onrender.com/actuator/health || exit 1

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline Scan
        run: |
          mkdir -p zap-output
          docker run --rm \
            -v "$(pwd)/zap-output:/zap/wrk:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t https://student-management-${GITHUB_REF_NAME}.onrender.com \
            -a -m 5 \
            -r zap-report.html \
            -w zap-report.md \
            -J zap-report.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: zapreport-html
          path: zap-output/zap-report.html

  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy, dast]
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${GITHUB_REF_NAME}"
          REPO="${{ github.repository }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          payload="{
            \"content\": \"
              üöÄ **Pipeline Finished** \n
              üìÇ Repo: **${REPO}** \n
              üåø Branch: \`${BRANCH}\` \n
              ‚úÖ Status: ${STATUS} \n
              üîó Run: ${RUN_URL} \n
              üìä Sonar: https://sonarcloud.io/dashboard?id=CTD03_student-management
            \"
          }"
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"
